# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.1
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import stadiamaps
from stadiamaps.models.locate_detailed_edge import LocateDetailedEdge  # noqa: E501
from stadiamaps.rest import ApiException

class TestLocateDetailedEdge(unittest.TestCase):
    """LocateDetailedEdge unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test LocateDetailedEdge
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LocateDetailedEdge`
        """
        model = stadiamaps.models.locate_detailed_edge.LocateDetailedEdge()  # noqa: E501
        if include_optional :
            return LocateDetailedEdge(
                sidewalk_left = True, 
                sidewalk_right = True, 
                lane_count = 56, 
                stop_sign = True, 
                sac_scale = 'none', 
                yield_sign = True, 
                not_thru = True, 
                forward = True, 
                end_node = stadiamaps.models.node_id.nodeId(
                    id = 56, 
                    value = 56, 
                    tile_id = 56, 
                    level = 56, ), 
                truck_route = True, 
                speeds = stadiamaps.models.speeds.speeds(
                    predicted = True, 
                    constrained_flow = 56, 
                    free_flow = 56, 
                    type = 'classified', 
                    default = 56, ), 
                bike_network = True, 
                round_about = True, 
                traffic_signal = True, 
                access_restriction = True, 
                destination_only = True, 
                geo_attributes = stadiamaps.models.geo_attributes.geoAttributes(
                    curvature = 56, 
                    max_down_slope = 1.337, 
                    max_up_slope = 1.337, 
                    weighted_grade = 1.337, 
                    length = 56, ), 
                start_restriction = stadiamaps.models.restrictions.restrictions(
                    golf_cart = True, 
                    truck = True, 
                    pedestrian = True, 
                    wheelchair = True, 
                    taxi = True, 
                    hov = True, 
                    emergency = True, 
                    motorcycle = True, 
                    car = True, 
                    moped = True, 
                    bus = True, 
                    bicycle = True, ), 
                cycle_lane = 'none', 
                end_restriction = stadiamaps.models.restrictions.restrictions(
                    golf_cart = True, 
                    truck = True, 
                    pedestrian = True, 
                    wheelchair = True, 
                    taxi = True, 
                    hov = True, 
                    emergency = True, 
                    motorcycle = True, 
                    car = True, 
                    moped = True, 
                    bus = True, 
                    bicycle = True, ), 
                seasonal = True, 
                country_crossing = True, 
                part_of_complex_restriction = True, 
                has_sign = True, 
                access = stadiamaps.models.restrictions.restrictions(
                    golf_cart = True, 
                    truck = True, 
                    pedestrian = True, 
                    wheelchair = True, 
                    taxi = True, 
                    hov = True, 
                    emergency = True, 
                    motorcycle = True, 
                    car = True, 
                    moped = True, 
                    bus = True, 
                    bicycle = True, ), 
                bridge = True, 
                classification = stadiamaps.models.highway_classification.highwayClassification(
                    internal = True, 
                    link = True, 
                    surface = 'paved_smooth', 
                    use = 'road', ), 
                toll = True, 
                tunnel = True
            )
        else :
            return LocateDetailedEdge(
        )
        """

    def testLocateDetailedEdge(self):
        """Test LocateDetailedEdge"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
