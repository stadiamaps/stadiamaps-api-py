# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.1
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import stadiamaps
from stadiamaps.models.trace_attributes_response import TraceAttributesResponse  # noqa: E501
from stadiamaps.rest import ApiException

class TestTraceAttributesResponse(unittest.TestCase):
    """TraceAttributesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TraceAttributesResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TraceAttributesResponse`
        """
        model = stadiamaps.models.trace_attributes_response.TraceAttributesResponse()  # noqa: E501
        if include_optional :
            return TraceAttributesResponse(
                edges = [
                    stadiamaps.models.trace_edge.traceEdge(
                        names = [
                            ''
                            ], 
                        length = 1.337, 
                        speed = 56, 
                        road_class = 'motorway', 
                        begin_heading = 56, 
                        end_heading = 56, 
                        begin_shape_index = 56, 
                        end_shape_index = 56, 
                        traversability = 'forward', 
                        use = 'road', 
                        toll = True, 
                        unpaved = True, 
                        tunnel = True, 
                        bridge = True, 
                        roundabout = True, 
                        internal_intersection = True, 
                        drive_on_right = True, 
                        surface = 'paved_smooth', 
                        sign = stadiamaps.models.edge_sign.edgeSign(
                            exit_number = [
                                '91B'
                                ], 
                            exit_branch = [
                                'I 95 North'
                                ], 
                            exit_toward = [
                                'New York'
                                ], 
                            exit_name = [
                                'Gettysburg Pike'
                                ], ), 
                        travel_mode = 'drive', 
                        vehicle_type = 'car', 
                        pedestrian_type = 'foot', 
                        bicycle_type = 'road', 
                        transit_type = 'tram', 
                        id = 56, 
                        way_id = 56, 
                        weighted_grade = 1.337, 
                        max_upward_grade = 56, 
                        max_downward_grade = 56, 
                        mean_elevation = 56, 
                        lane_count = 56, 
                        cycle_lane = 'none', 
                        bicycle_network = 56, 
                        sac_scale = 56, 
                        sidewalk = 'left', 
                        density = 56, 
                        speed_limit = null, 
                        truck_speed = 56, 
                        truck_route = True, 
                        end_node = stadiamaps.models.end_node.endNode(
                            intersecting_edges = [
                                stadiamaps.models.intersecting_edge.intersectingEdge(
                                    begin_heading = 56, 
                                    from_edge_name_consistency = True, 
                                    to_edge_name_consistency = True, 
                                    driveability = 'forward', 
                                    cyclability = 'forward', 
                                    walkability = 'forward', )
                                ], 
                            elapsed_time = 1.337, 
                            admin_index = 56, 
                            type = 'street_intersection', 
                            fork = True, 
                            time_zone = 'America/New_York', ), )
                    ], 
                admins = [
                    stadiamaps.models.admin_region.adminRegion(
                        country_code = '', 
                        country_text = '', 
                        state_code = '', 
                        state_text = '', )
                    ], 
                matched_points = [
                    stadiamaps.models.matched_point.matchedPoint(
                        lat = 1.337, 
                        lon = 1.337, 
                        type = 'unmatched', 
                        edge_index = 56, 
                        begin_route_discontinuity = True, 
                        end_route_discontinuity = True, 
                        distance_along_edge = 1.337, 
                        distance_from_trace_point = 1.337, )
                    ], 
                osm_changeset = 56, 
                shape = '', 
                confidence_score = 0, 
                id = 'kesklinn', 
                units = 'kilometers', 
                alternate_paths = [
                    stadiamaps.models.trace_attributes_base_response.traceAttributesBaseResponse(
                        edges = [
                            stadiamaps.models.trace_edge.traceEdge(
                                names = [
                                    ''
                                    ], 
                                length = 1.337, 
                                speed = 56, 
                                road_class = 'motorway', 
                                begin_heading = 56, 
                                end_heading = 56, 
                                begin_shape_index = 56, 
                                end_shape_index = 56, 
                                traversability = 'forward', 
                                use = 'road', 
                                toll = True, 
                                unpaved = True, 
                                tunnel = True, 
                                bridge = True, 
                                roundabout = True, 
                                internal_intersection = True, 
                                drive_on_right = True, 
                                surface = 'paved_smooth', 
                                sign = stadiamaps.models.edge_sign.edgeSign(
                                    exit_number = [
                                        '91B'
                                        ], 
                                    exit_branch = [
                                        'I 95 North'
                                        ], 
                                    exit_toward = [
                                        'New York'
                                        ], 
                                    exit_name = [
                                        'Gettysburg Pike'
                                        ], ), 
                                travel_mode = 'drive', 
                                vehicle_type = 'car', 
                                pedestrian_type = 'foot', 
                                bicycle_type = 'road', 
                                transit_type = 'tram', 
                                id = 56, 
                                way_id = 56, 
                                weighted_grade = 1.337, 
                                max_upward_grade = 56, 
                                max_downward_grade = 56, 
                                mean_elevation = 56, 
                                lane_count = 56, 
                                cycle_lane = 'none', 
                                bicycle_network = 56, 
                                sac_scale = 56, 
                                sidewalk = 'left', 
                                density = 56, 
                                speed_limit = null, 
                                truck_speed = 56, 
                                truck_route = True, 
                                end_node = stadiamaps.models.end_node.endNode(
                                    intersecting_edges = [
                                        stadiamaps.models.intersecting_edge.intersectingEdge(
                                            begin_heading = 56, 
                                            from_edge_name_consistency = True, 
                                            to_edge_name_consistency = True, 
                                            driveability = 'forward', 
                                            cyclability = 'forward', 
                                            walkability = 'forward', )
                                        ], 
                                    elapsed_time = 1.337, 
                                    admin_index = 56, 
                                    type = 'street_intersection', 
                                    fork = True, 
                                    time_zone = 'America/New_York', ), )
                            ], 
                        admins = [
                            stadiamaps.models.admin_region.adminRegion(
                                country_code = '', 
                                country_text = '', 
                                state_code = '', 
                                state_text = '', )
                            ], 
                        matched_points = [
                            stadiamaps.models.matched_point.matchedPoint(
                                lat = 1.337, 
                                lon = 1.337, 
                                type = 'unmatched', 
                                edge_index = 56, 
                                begin_route_discontinuity = True, 
                                end_route_discontinuity = True, 
                                distance_along_edge = 1.337, 
                                distance_from_trace_point = 1.337, )
                            ], 
                        osm_changeset = 56, 
                        shape = '', 
                        confidence_score = 0, )
                    ]
            )
        else :
            return TraceAttributesResponse(
        )
        """

    def testTraceAttributesResponse(self):
        """Test TraceAttributesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
