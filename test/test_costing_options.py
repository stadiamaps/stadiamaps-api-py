# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.1
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import stadiamaps
from stadiamaps.models.costing_options import CostingOptions  # noqa: E501
from stadiamaps.rest import ApiException

class TestCostingOptions(unittest.TestCase):
    """CostingOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test CostingOptions
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CostingOptions`
        """
        model = stadiamaps.models.costing_options.CostingOptions()  # noqa: E501
        if include_optional :
            return CostingOptions(
                auto = None, 
                bus = None, 
                taxi = None, 
                truck = None, 
                bicycle = None, 
                motor_scooter = None, 
                motorcycle = None, 
                pedestrian = stadiamaps.models.pedestrian_costing_options.pedestrianCostingOptions(
                    walking_speed = 0.5, 
                    walkway_factor = 1.337, 
                    sidewalk_factor = 1.337, 
                    alley_factor = 1.337, 
                    driveway_factor = 1.337, 
                    step_penalty = 56, 
                    use_ferry = 0, 
                    use_living_streets = 0, 
                    use_tracks = 0, 
                    use_hills = 0, 
                    use_lit = 0, 
                    service_penalty = 56, 
                    service_factor = 1.337, 
                    max_hiking_difficulty = 1, 
                    bss_rent_cost = 56, 
                    bss_rent_penalty = 56, )
            )
        else :
            return CostingOptions(
        )
        """

    def testCostingOptions(self):
        """Test CostingOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
