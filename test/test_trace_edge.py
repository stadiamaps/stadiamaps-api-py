# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.1
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import stadiamaps
from stadiamaps.models.trace_edge import TraceEdge  # noqa: E501
from stadiamaps.rest import ApiException

class TestTraceEdge(unittest.TestCase):
    """TraceEdge unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TraceEdge
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TraceEdge`
        """
        model = stadiamaps.models.trace_edge.TraceEdge()  # noqa: E501
        if include_optional :
            return TraceEdge(
                names = [
                    ''
                    ], 
                length = 1.337, 
                speed = 56, 
                road_class = 'motorway', 
                begin_heading = 56, 
                end_heading = 56, 
                begin_shape_index = 56, 
                end_shape_index = 56, 
                traversability = 'forward', 
                use = 'road', 
                toll = True, 
                unpaved = True, 
                tunnel = True, 
                bridge = True, 
                roundabout = True, 
                internal_intersection = True, 
                drive_on_right = True, 
                surface = 'paved_smooth', 
                sign = stadiamaps.models.edge_sign.edgeSign(
                    exit_number = [
                        '91B'
                        ], 
                    exit_branch = [
                        'I 95 North'
                        ], 
                    exit_toward = [
                        'New York'
                        ], 
                    exit_name = [
                        'Gettysburg Pike'
                        ], ), 
                travel_mode = 'drive', 
                vehicle_type = 'car', 
                pedestrian_type = 'foot', 
                bicycle_type = 'road', 
                transit_type = 'tram', 
                id = 56, 
                way_id = 56, 
                weighted_grade = 1.337, 
                max_upward_grade = 56, 
                max_downward_grade = 56, 
                mean_elevation = 56, 
                lane_count = 56, 
                cycle_lane = 'none', 
                bicycle_network = 56, 
                sac_scale = 56, 
                sidewalk = 'left', 
                density = 56, 
                speed_limit = None, 
                truck_speed = 56, 
                truck_route = True, 
                end_node = stadiamaps.models.end_node.endNode(
                    intersecting_edges = [
                        stadiamaps.models.intersecting_edge.intersectingEdge(
                            begin_heading = 56, 
                            from_edge_name_consistency = True, 
                            to_edge_name_consistency = True, 
                            driveability = 'forward', 
                            cyclability = 'forward', 
                            walkability = 'forward', 
                            use = 'road', 
                            road_class = 'motorway', )
                        ], 
                    elapsed_time = 1.337, 
                    admin_index = 56, 
                    type = 'street_intersection', 
                    fork = True, 
                    time_zone = 'America/New_York', )
            )
        else :
            return TraceEdge(
        )
        """

    def testTraceEdge(self):
        """Test TraceEdge"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
