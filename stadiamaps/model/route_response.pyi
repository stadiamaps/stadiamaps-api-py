# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class RouteResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "trip",
        }
        
        class properties:
            
            
            class trip(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "status_message",
                        "summary",
                        "legs",
                        "language",
                        "locations",
                        "units",
                        "status",
                    }
                    
                    class properties:
                        status = schemas.IntSchema
                        status_message = schemas.StrSchema
                    
                        @staticmethod
                        def units() -> typing.Type['ValhallaLongUnits']:
                            return ValhallaLongUnits
                    
                        @staticmethod
                        def language() -> typing.Type['ValhallaLanguages']:
                            return ValhallaLanguages
                        
                        
                        class locations(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                @staticmethod
                                def items() -> typing.Type['RoutingResponseWaypoint']:
                                    return RoutingResponseWaypoint
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple['RoutingResponseWaypoint'], typing.List['RoutingResponseWaypoint']],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'locations':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> 'RoutingResponseWaypoint':
                                return super().__getitem__(i)
                        
                        
                        class legs(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                @staticmethod
                                def items() -> typing.Type['RouteLeg']:
                                    return RouteLeg
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple['RouteLeg'], typing.List['RouteLeg']],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'legs':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> 'RouteLeg':
                                return super().__getitem__(i)
                    
                        @staticmethod
                        def summary() -> typing.Type['RouteSummary']:
                            return RouteSummary
                        __annotations__ = {
                            "status": status,
                            "status_message": status_message,
                            "units": units,
                            "language": language,
                            "locations": locations,
                            "legs": legs,
                            "summary": summary,
                        }
                
                status_message: MetaOapg.properties.status_message
                summary: 'RouteSummary'
                legs: MetaOapg.properties.legs
                language: 'ValhallaLanguages'
                locations: MetaOapg.properties.locations
                units: 'ValhallaLongUnits'
                status: MetaOapg.properties.status
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status_message"]) -> MetaOapg.properties.status_message: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["units"]) -> 'ValhallaLongUnits': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["language"]) -> 'ValhallaLanguages': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["locations"]) -> MetaOapg.properties.locations: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["legs"]) -> MetaOapg.properties.legs: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["summary"]) -> 'RouteSummary': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "status_message", "units", "language", "locations", "legs", "summary", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status_message"]) -> MetaOapg.properties.status_message: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> 'ValhallaLongUnits': ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> 'ValhallaLanguages': ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["locations"]) -> MetaOapg.properties.locations: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["legs"]) -> MetaOapg.properties.legs: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> 'RouteSummary': ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "status_message", "units", "language", "locations", "legs", "summary", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    status_message: typing.Union[MetaOapg.properties.status_message, str, ],
                    summary: 'RouteSummary',
                    legs: typing.Union[MetaOapg.properties.legs, list, tuple, ],
                    language: 'ValhallaLanguages',
                    locations: typing.Union[MetaOapg.properties.locations, list, tuple, ],
                    units: 'ValhallaLongUnits',
                    status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'trip':
                    return super().__new__(
                        cls,
                        *_args,
                        status_message=status_message,
                        summary=summary,
                        legs=legs,
                        language=language,
                        locations=locations,
                        units=units,
                        status=status,
                        _configuration=_configuration,
                        **kwargs,
                    )
            id = schemas.StrSchema
            __annotations__ = {
                "trip": trip,
                "id": id,
            }
    
    trip: MetaOapg.properties.trip
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trip"]) -> MetaOapg.properties.trip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["trip", "id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trip"]) -> MetaOapg.properties.trip: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["trip", "id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        trip: typing.Union[MetaOapg.properties.trip, dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RouteResponse':
        return super().__new__(
            cls,
            *_args,
            trip=trip,
            id=id,
            _configuration=_configuration,
            **kwargs,
        )

from stadiamaps.model.route_leg import RouteLeg
from stadiamaps.model.route_summary import RouteSummary
from stadiamaps.model.routing_response_waypoint import RoutingResponseWaypoint
from stadiamaps.model.valhalla_languages import ValhallaLanguages
from stadiamaps.model.valhalla_long_units import ValhallaLongUnits
