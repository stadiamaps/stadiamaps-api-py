# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class RouteManeuver(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "begin_shape_index",
            "cost",
            "travel_mode",
            "instruction",
            "length",
            "end_shape_index",
            "time",
            "type",
            "travel_type",
        }
        
        class properties:
            type = schemas.IntSchema
            instruction = schemas.StrSchema
            time = schemas.Float64Schema
            length = schemas.Float64Schema
            begin_shape_index = schemas.IntSchema
            end_shape_index = schemas.IntSchema
        
            @staticmethod
            def travel_mode() -> typing.Type['TravelMode']:
                return TravelMode
            
            
            class travel_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CAR(cls):
                    return cls("car")
                
                @schemas.classproperty
                def FOOT(cls):
                    return cls("foot")
                
                @schemas.classproperty
                def ROAD(cls):
                    return cls("road")
                
                @schemas.classproperty
                def TRAM(cls):
                    return cls("tram")
                
                @schemas.classproperty
                def METRO(cls):
                    return cls("metro")
                
                @schemas.classproperty
                def RAIL(cls):
                    return cls("rail")
                
                @schemas.classproperty
                def BUS(cls):
                    return cls("bus")
                
                @schemas.classproperty
                def FERRY(cls):
                    return cls("ferry")
                
                @schemas.classproperty
                def CABLE_CAR(cls):
                    return cls("cable_car")
                
                @schemas.classproperty
                def GONDOLA(cls):
                    return cls("gondola")
                
                @schemas.classproperty
                def FUNICULAR(cls):
                    return cls("funicular")
            verbal_transition_alert_instruction = schemas.StrSchema
            verbal_pre_transition_instruction = schemas.StrSchema
            verbal_post_transition_instruction = schemas.StrSchema
            
            
            class street_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'street_names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class begin_street_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'begin_street_names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            toll = schemas.BoolSchema
            rough = schemas.BoolSchema
            gate = schemas.BoolSchema
            ferry = schemas.BoolSchema
        
            @staticmethod
            def sign() -> typing.Type['ManeuverSign']:
                return ManeuverSign
            roundabout_exit_count = schemas.IntSchema
            depart_instruction = schemas.IntSchema
            verbal_depart_instruction = schemas.IntSchema
            arrive_instruction = schemas.IntSchema
            verbal_arrive_instruction = schemas.IntSchema
        
            @staticmethod
            def transit_info() -> typing.Type['TransitInfo']:
                return TransitInfo
            verbal_multi_cue = schemas.BoolSchema
            
            
            class bss_maneuver_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE_ACTION(cls):
                    return cls("NoneAction")
                
                @schemas.classproperty
                def RENT_BIKE_AT_BIKE_SHARE(cls):
                    return cls("RentBikeAtBikeShare")
                
                @schemas.classproperty
                def RETURN_BIKE_AT_BIKE_SHARE(cls):
                    return cls("ReturnBikeAtBikeShare")
            __annotations__ = {
                "type": type,
                "instruction": instruction,
                "time": time,
                "length": length,
                "begin_shape_index": begin_shape_index,
                "end_shape_index": end_shape_index,
                "travel_mode": travel_mode,
                "travel_type": travel_type,
                "verbal_transition_alert_instruction": verbal_transition_alert_instruction,
                "verbal_pre_transition_instruction": verbal_pre_transition_instruction,
                "verbal_post_transition_instruction": verbal_post_transition_instruction,
                "street_names": street_names,
                "begin_street_names": begin_street_names,
                "toll": toll,
                "rough": rough,
                "gate": gate,
                "ferry": ferry,
                "sign": sign,
                "roundabout_exit_count": roundabout_exit_count,
                "depart_instruction": depart_instruction,
                "verbal_depart_instruction": verbal_depart_instruction,
                "arrive_instruction": arrive_instruction,
                "verbal_arrive_instruction": verbal_arrive_instruction,
                "transit_info": transit_info,
                "verbal_multi_cue": verbal_multi_cue,
                "bss_maneuver_type": bss_maneuver_type,
            }
    
    begin_shape_index: MetaOapg.properties.begin_shape_index
    cost: schemas.AnyTypeSchema
    travel_mode: 'TravelMode'
    instruction: MetaOapg.properties.instruction
    length: MetaOapg.properties.length
    end_shape_index: MetaOapg.properties.end_shape_index
    time: MetaOapg.properties.time
    type: MetaOapg.properties.type
    travel_type: MetaOapg.properties.travel_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instruction"]) -> MetaOapg.properties.instruction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["begin_shape_index"]) -> MetaOapg.properties.begin_shape_index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_shape_index"]) -> MetaOapg.properties.end_shape_index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["travel_mode"]) -> 'TravelMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["travel_type"]) -> MetaOapg.properties.travel_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verbal_transition_alert_instruction"]) -> MetaOapg.properties.verbal_transition_alert_instruction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verbal_pre_transition_instruction"]) -> MetaOapg.properties.verbal_pre_transition_instruction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verbal_post_transition_instruction"]) -> MetaOapg.properties.verbal_post_transition_instruction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street_names"]) -> MetaOapg.properties.street_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["begin_street_names"]) -> MetaOapg.properties.begin_street_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toll"]) -> MetaOapg.properties.toll: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rough"]) -> MetaOapg.properties.rough: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gate"]) -> MetaOapg.properties.gate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ferry"]) -> MetaOapg.properties.ferry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sign"]) -> 'ManeuverSign': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roundabout_exit_count"]) -> MetaOapg.properties.roundabout_exit_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depart_instruction"]) -> MetaOapg.properties.depart_instruction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verbal_depart_instruction"]) -> MetaOapg.properties.verbal_depart_instruction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arrive_instruction"]) -> MetaOapg.properties.arrive_instruction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verbal_arrive_instruction"]) -> MetaOapg.properties.verbal_arrive_instruction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transit_info"]) -> 'TransitInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verbal_multi_cue"]) -> MetaOapg.properties.verbal_multi_cue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bss_maneuver_type"]) -> MetaOapg.properties.bss_maneuver_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "instruction", "time", "length", "begin_shape_index", "end_shape_index", "travel_mode", "travel_type", "verbal_transition_alert_instruction", "verbal_pre_transition_instruction", "verbal_post_transition_instruction", "street_names", "begin_street_names", "toll", "rough", "gate", "ferry", "sign", "roundabout_exit_count", "depart_instruction", "verbal_depart_instruction", "arrive_instruction", "verbal_arrive_instruction", "transit_info", "verbal_multi_cue", "bss_maneuver_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instruction"]) -> MetaOapg.properties.instruction: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["begin_shape_index"]) -> MetaOapg.properties.begin_shape_index: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_shape_index"]) -> MetaOapg.properties.end_shape_index: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["travel_mode"]) -> 'TravelMode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["travel_type"]) -> MetaOapg.properties.travel_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verbal_transition_alert_instruction"]) -> typing.Union[MetaOapg.properties.verbal_transition_alert_instruction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verbal_pre_transition_instruction"]) -> typing.Union[MetaOapg.properties.verbal_pre_transition_instruction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verbal_post_transition_instruction"]) -> typing.Union[MetaOapg.properties.verbal_post_transition_instruction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street_names"]) -> typing.Union[MetaOapg.properties.street_names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["begin_street_names"]) -> typing.Union[MetaOapg.properties.begin_street_names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toll"]) -> typing.Union[MetaOapg.properties.toll, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rough"]) -> typing.Union[MetaOapg.properties.rough, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gate"]) -> typing.Union[MetaOapg.properties.gate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ferry"]) -> typing.Union[MetaOapg.properties.ferry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sign"]) -> typing.Union['ManeuverSign', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roundabout_exit_count"]) -> typing.Union[MetaOapg.properties.roundabout_exit_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depart_instruction"]) -> typing.Union[MetaOapg.properties.depart_instruction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verbal_depart_instruction"]) -> typing.Union[MetaOapg.properties.verbal_depart_instruction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arrive_instruction"]) -> typing.Union[MetaOapg.properties.arrive_instruction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verbal_arrive_instruction"]) -> typing.Union[MetaOapg.properties.verbal_arrive_instruction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transit_info"]) -> typing.Union['TransitInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verbal_multi_cue"]) -> typing.Union[MetaOapg.properties.verbal_multi_cue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bss_maneuver_type"]) -> typing.Union[MetaOapg.properties.bss_maneuver_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "instruction", "time", "length", "begin_shape_index", "end_shape_index", "travel_mode", "travel_type", "verbal_transition_alert_instruction", "verbal_pre_transition_instruction", "verbal_post_transition_instruction", "street_names", "begin_street_names", "toll", "rough", "gate", "ferry", "sign", "roundabout_exit_count", "depart_instruction", "verbal_depart_instruction", "arrive_instruction", "verbal_arrive_instruction", "transit_info", "verbal_multi_cue", "bss_maneuver_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        begin_shape_index: typing.Union[MetaOapg.properties.begin_shape_index, decimal.Decimal, int, ],
        cost: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        travel_mode: 'TravelMode',
        instruction: typing.Union[MetaOapg.properties.instruction, str, ],
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, ],
        end_shape_index: typing.Union[MetaOapg.properties.end_shape_index, decimal.Decimal, int, ],
        time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, float, ],
        type: typing.Union[MetaOapg.properties.type, decimal.Decimal, int, ],
        travel_type: typing.Union[MetaOapg.properties.travel_type, str, ],
        verbal_transition_alert_instruction: typing.Union[MetaOapg.properties.verbal_transition_alert_instruction, str, schemas.Unset] = schemas.unset,
        verbal_pre_transition_instruction: typing.Union[MetaOapg.properties.verbal_pre_transition_instruction, str, schemas.Unset] = schemas.unset,
        verbal_post_transition_instruction: typing.Union[MetaOapg.properties.verbal_post_transition_instruction, str, schemas.Unset] = schemas.unset,
        street_names: typing.Union[MetaOapg.properties.street_names, list, tuple, schemas.Unset] = schemas.unset,
        begin_street_names: typing.Union[MetaOapg.properties.begin_street_names, list, tuple, schemas.Unset] = schemas.unset,
        toll: typing.Union[MetaOapg.properties.toll, bool, schemas.Unset] = schemas.unset,
        rough: typing.Union[MetaOapg.properties.rough, bool, schemas.Unset] = schemas.unset,
        gate: typing.Union[MetaOapg.properties.gate, bool, schemas.Unset] = schemas.unset,
        ferry: typing.Union[MetaOapg.properties.ferry, bool, schemas.Unset] = schemas.unset,
        sign: typing.Union['ManeuverSign', schemas.Unset] = schemas.unset,
        roundabout_exit_count: typing.Union[MetaOapg.properties.roundabout_exit_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        depart_instruction: typing.Union[MetaOapg.properties.depart_instruction, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        verbal_depart_instruction: typing.Union[MetaOapg.properties.verbal_depart_instruction, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        arrive_instruction: typing.Union[MetaOapg.properties.arrive_instruction, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        verbal_arrive_instruction: typing.Union[MetaOapg.properties.verbal_arrive_instruction, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        transit_info: typing.Union['TransitInfo', schemas.Unset] = schemas.unset,
        verbal_multi_cue: typing.Union[MetaOapg.properties.verbal_multi_cue, bool, schemas.Unset] = schemas.unset,
        bss_maneuver_type: typing.Union[MetaOapg.properties.bss_maneuver_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RouteManeuver':
        return super().__new__(
            cls,
            *_args,
            begin_shape_index=begin_shape_index,
            cost=cost,
            travel_mode=travel_mode,
            instruction=instruction,
            length=length,
            end_shape_index=end_shape_index,
            time=time,
            type=type,
            travel_type=travel_type,
            verbal_transition_alert_instruction=verbal_transition_alert_instruction,
            verbal_pre_transition_instruction=verbal_pre_transition_instruction,
            verbal_post_transition_instruction=verbal_post_transition_instruction,
            street_names=street_names,
            begin_street_names=begin_street_names,
            toll=toll,
            rough=rough,
            gate=gate,
            ferry=ferry,
            sign=sign,
            roundabout_exit_count=roundabout_exit_count,
            depart_instruction=depart_instruction,
            verbal_depart_instruction=verbal_depart_instruction,
            arrive_instruction=arrive_instruction,
            verbal_arrive_instruction=verbal_arrive_instruction,
            transit_info=transit_info,
            verbal_multi_cue=verbal_multi_cue,
            bss_maneuver_type=bss_maneuver_type,
            _configuration=_configuration,
            **kwargs,
        )

from stadiamaps.model.maneuver_sign import ManeuverSign
from stadiamaps.model.transit_info import TransitInfo
from stadiamaps.model.travel_mode import TravelMode
