# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class EndNode(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The node at the end of this edge
    """


    class MetaOapg:
        
        class properties:
            
            
            class intersecting_edges(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IntersectingEdge']:
                        return IntersectingEdge
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IntersectingEdge'], typing.List['IntersectingEdge']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'intersecting_edges':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IntersectingEdge':
                    return super().__getitem__(i)
            elapsed_time = schemas.Float64Schema
            admin_index = schemas.IntSchema
        
            @staticmethod
            def type() -> typing.Type['NodeType']:
                return NodeType
            fork = schemas.BoolSchema
            time_zone = schemas.StrSchema
            __annotations__ = {
                "intersecting_edges": intersecting_edges,
                "elapsed_time": elapsed_time,
                "admin_index": admin_index,
                "type": type,
                "fork": fork,
                "time_zone": time_zone,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intersecting_edges"]) -> MetaOapg.properties.intersecting_edges: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elapsed_time"]) -> MetaOapg.properties.elapsed_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin_index"]) -> MetaOapg.properties.admin_index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'NodeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fork"]) -> MetaOapg.properties.fork: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_zone"]) -> MetaOapg.properties.time_zone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["intersecting_edges", "elapsed_time", "admin_index", "type", "fork", "time_zone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intersecting_edges"]) -> typing.Union[MetaOapg.properties.intersecting_edges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elapsed_time"]) -> typing.Union[MetaOapg.properties.elapsed_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin_index"]) -> typing.Union[MetaOapg.properties.admin_index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['NodeType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fork"]) -> typing.Union[MetaOapg.properties.fork, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_zone"]) -> typing.Union[MetaOapg.properties.time_zone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["intersecting_edges", "elapsed_time", "admin_index", "type", "fork", "time_zone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        intersecting_edges: typing.Union[MetaOapg.properties.intersecting_edges, list, tuple, schemas.Unset] = schemas.unset,
        elapsed_time: typing.Union[MetaOapg.properties.elapsed_time, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        admin_index: typing.Union[MetaOapg.properties.admin_index, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        type: typing.Union['NodeType', schemas.Unset] = schemas.unset,
        fork: typing.Union[MetaOapg.properties.fork, bool, schemas.Unset] = schemas.unset,
        time_zone: typing.Union[MetaOapg.properties.time_zone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EndNode':
        return super().__new__(
            cls,
            *_args,
            intersecting_edges=intersecting_edges,
            elapsed_time=elapsed_time,
            admin_index=admin_index,
            type=type,
            fork=fork,
            time_zone=time_zone,
            _configuration=_configuration,
            **kwargs,
        )

from stadiamaps.model.intersecting_edge import IntersectingEdge
from stadiamaps.model.node_type import NodeType
