# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class PeliasGeoJSONProperties(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            gid = schemas.StrSchema
            source_id = schemas.StrSchema
            label = schemas.StrSchema
        
            @staticmethod
            def layer() -> typing.Type['PeliasLayer']:
                return PeliasLayer
            name = schemas.StrSchema
            
            
            class accuracy(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "point": "POINT",
                        "centroid": "CENTROID",
                    }
                
                @schemas.classproperty
                def POINT(cls):
                    return cls("point")
                
                @schemas.classproperty
                def CENTROID(cls):
                    return cls("centroid")
            
            
            class addendum(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class osm(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    website = schemas.StrSchema
                                    wikipedia = schemas.StrSchema
                                    wikidata = schemas.StrSchema
                                    phone = schemas.StrSchema
                                    __annotations__ = {
                                        "website": website,
                                        "wikipedia": wikipedia,
                                        "wikidata": wikidata,
                                        "phone": phone,
                                    }
                                additional_properties = schemas.AnyTypeSchema
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["wikipedia"]) -> MetaOapg.properties.wikipedia: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["wikidata"]) -> MetaOapg.properties.wikidata: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["website"], typing_extensions.Literal["wikipedia"], typing_extensions.Literal["wikidata"], typing_extensions.Literal["phone"], str, ]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> typing.Union[MetaOapg.properties.website, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["wikipedia"]) -> typing.Union[MetaOapg.properties.wikipedia, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["wikidata"]) -> typing.Union[MetaOapg.properties.wikidata, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["website"], typing_extensions.Literal["wikipedia"], typing_extensions.Literal["wikidata"], typing_extensions.Literal["phone"], str, ]):
                                return super().get_item_oapg(name)
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                website: typing.Union[MetaOapg.properties.website, str, schemas.Unset] = schemas.unset,
                                wikipedia: typing.Union[MetaOapg.properties.wikipedia, str, schemas.Unset] = schemas.unset,
                                wikidata: typing.Union[MetaOapg.properties.wikidata, str, schemas.Unset] = schemas.unset,
                                phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            ) -> 'osm':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    website=website,
                                    wikipedia=wikipedia,
                                    wikidata=wikidata,
                                    phone=phone,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "osm": osm,
                        }
                    additional_properties = schemas.AnyTypeSchema
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["osm"]) -> MetaOapg.properties.osm: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["osm"], str, ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["osm"]) -> typing.Union[MetaOapg.properties.osm, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["osm"], str, ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    osm: typing.Union[MetaOapg.properties.osm, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'addendum':
                    return super().__new__(
                        cls,
                        *_args,
                        osm=osm,
                        _configuration=_configuration,
                        **kwargs,
                    )
            continent = schemas.StrSchema
            continent_gid = schemas.StrSchema
            country = schemas.StrSchema
            country_gid = schemas.StrSchema
            neighbourhood = schemas.StrSchema
            neighbourhood_gid = schemas.StrSchema
            borough = schemas.StrSchema
            borough_gid = schemas.StrSchema
            postalcode = schemas.StrSchema
            street = schemas.StrSchema
            housenumber = schemas.StrSchema
            locality = schemas.StrSchema
            lecality_gid = schemas.StrSchema
            county = schemas.StrSchema
            region = schemas.StrSchema
            region_a = schemas.StrSchema
            __annotations__ = {
                "gid": gid,
                "source_id": source_id,
                "label": label,
                "layer": layer,
                "name": name,
                "accuracy": accuracy,
                "addendum": addendum,
                "continent": continent,
                "continent_gid": continent_gid,
                "country": country,
                "country_gid": country_gid,
                "neighbourhood": neighbourhood,
                "neighbourhood_gid": neighbourhood_gid,
                "borough": borough,
                "borough_gid": borough_gid,
                "postalcode": postalcode,
                "street": street,
                "housenumber": housenumber,
                "locality": locality,
                "lecality_gid": lecality_gid,
                "county": county,
                "region": region,
                "region_a": region_a,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gid"]) -> MetaOapg.properties.gid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_id"]) -> MetaOapg.properties.source_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layer"]) -> 'PeliasLayer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accuracy"]) -> MetaOapg.properties.accuracy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addendum"]) -> MetaOapg.properties.addendum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["continent"]) -> MetaOapg.properties.continent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["continent_gid"]) -> MetaOapg.properties.continent_gid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_gid"]) -> MetaOapg.properties.country_gid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["neighbourhood"]) -> MetaOapg.properties.neighbourhood: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["neighbourhood_gid"]) -> MetaOapg.properties.neighbourhood_gid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["borough"]) -> MetaOapg.properties.borough: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["borough_gid"]) -> MetaOapg.properties.borough_gid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalcode"]) -> MetaOapg.properties.postalcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street"]) -> MetaOapg.properties.street: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["housenumber"]) -> MetaOapg.properties.housenumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locality"]) -> MetaOapg.properties.locality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lecality_gid"]) -> MetaOapg.properties.lecality_gid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["county"]) -> MetaOapg.properties.county: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region_a"]) -> MetaOapg.properties.region_a: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["gid"], typing_extensions.Literal["source_id"], typing_extensions.Literal["label"], typing_extensions.Literal["layer"], typing_extensions.Literal["name"], typing_extensions.Literal["accuracy"], typing_extensions.Literal["addendum"], typing_extensions.Literal["continent"], typing_extensions.Literal["continent_gid"], typing_extensions.Literal["country"], typing_extensions.Literal["country_gid"], typing_extensions.Literal["neighbourhood"], typing_extensions.Literal["neighbourhood_gid"], typing_extensions.Literal["borough"], typing_extensions.Literal["borough_gid"], typing_extensions.Literal["postalcode"], typing_extensions.Literal["street"], typing_extensions.Literal["housenumber"], typing_extensions.Literal["locality"], typing_extensions.Literal["lecality_gid"], typing_extensions.Literal["county"], typing_extensions.Literal["region"], typing_extensions.Literal["region_a"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gid"]) -> typing.Union[MetaOapg.properties.gid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_id"]) -> typing.Union[MetaOapg.properties.source_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layer"]) -> typing.Union['PeliasLayer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accuracy"]) -> typing.Union[MetaOapg.properties.accuracy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addendum"]) -> typing.Union[MetaOapg.properties.addendum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["continent"]) -> typing.Union[MetaOapg.properties.continent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["continent_gid"]) -> typing.Union[MetaOapg.properties.continent_gid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_gid"]) -> typing.Union[MetaOapg.properties.country_gid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["neighbourhood"]) -> typing.Union[MetaOapg.properties.neighbourhood, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["neighbourhood_gid"]) -> typing.Union[MetaOapg.properties.neighbourhood_gid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["borough"]) -> typing.Union[MetaOapg.properties.borough, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["borough_gid"]) -> typing.Union[MetaOapg.properties.borough_gid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalcode"]) -> typing.Union[MetaOapg.properties.postalcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street"]) -> typing.Union[MetaOapg.properties.street, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["housenumber"]) -> typing.Union[MetaOapg.properties.housenumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locality"]) -> typing.Union[MetaOapg.properties.locality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lecality_gid"]) -> typing.Union[MetaOapg.properties.lecality_gid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["county"]) -> typing.Union[MetaOapg.properties.county, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region_a"]) -> typing.Union[MetaOapg.properties.region_a, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gid"], typing_extensions.Literal["source_id"], typing_extensions.Literal["label"], typing_extensions.Literal["layer"], typing_extensions.Literal["name"], typing_extensions.Literal["accuracy"], typing_extensions.Literal["addendum"], typing_extensions.Literal["continent"], typing_extensions.Literal["continent_gid"], typing_extensions.Literal["country"], typing_extensions.Literal["country_gid"], typing_extensions.Literal["neighbourhood"], typing_extensions.Literal["neighbourhood_gid"], typing_extensions.Literal["borough"], typing_extensions.Literal["borough_gid"], typing_extensions.Literal["postalcode"], typing_extensions.Literal["street"], typing_extensions.Literal["housenumber"], typing_extensions.Literal["locality"], typing_extensions.Literal["lecality_gid"], typing_extensions.Literal["county"], typing_extensions.Literal["region"], typing_extensions.Literal["region_a"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        gid: typing.Union[MetaOapg.properties.gid, str, schemas.Unset] = schemas.unset,
        source_id: typing.Union[MetaOapg.properties.source_id, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        layer: typing.Union['PeliasLayer', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        accuracy: typing.Union[MetaOapg.properties.accuracy, str, schemas.Unset] = schemas.unset,
        addendum: typing.Union[MetaOapg.properties.addendum, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        continent: typing.Union[MetaOapg.properties.continent, str, schemas.Unset] = schemas.unset,
        continent_gid: typing.Union[MetaOapg.properties.continent_gid, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        country_gid: typing.Union[MetaOapg.properties.country_gid, str, schemas.Unset] = schemas.unset,
        neighbourhood: typing.Union[MetaOapg.properties.neighbourhood, str, schemas.Unset] = schemas.unset,
        neighbourhood_gid: typing.Union[MetaOapg.properties.neighbourhood_gid, str, schemas.Unset] = schemas.unset,
        borough: typing.Union[MetaOapg.properties.borough, str, schemas.Unset] = schemas.unset,
        borough_gid: typing.Union[MetaOapg.properties.borough_gid, str, schemas.Unset] = schemas.unset,
        postalcode: typing.Union[MetaOapg.properties.postalcode, str, schemas.Unset] = schemas.unset,
        street: typing.Union[MetaOapg.properties.street, str, schemas.Unset] = schemas.unset,
        housenumber: typing.Union[MetaOapg.properties.housenumber, str, schemas.Unset] = schemas.unset,
        locality: typing.Union[MetaOapg.properties.locality, str, schemas.Unset] = schemas.unset,
        lecality_gid: typing.Union[MetaOapg.properties.lecality_gid, str, schemas.Unset] = schemas.unset,
        county: typing.Union[MetaOapg.properties.county, str, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        region_a: typing.Union[MetaOapg.properties.region_a, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PeliasGeoJSONProperties':
        return super().__new__(
            cls,
            *_args,
            gid=gid,
            source_id=source_id,
            label=label,
            layer=layer,
            name=name,
            accuracy=accuracy,
            addendum=addendum,
            continent=continent,
            continent_gid=continent_gid,
            country=country,
            country_gid=country_gid,
            neighbourhood=neighbourhood,
            neighbourhood_gid=neighbourhood_gid,
            borough=borough,
            borough_gid=borough_gid,
            postalcode=postalcode,
            street=street,
            housenumber=housenumber,
            locality=locality,
            lecality_gid=lecality_gid,
            county=county,
            region=region,
            region_a=region_a,
            _configuration=_configuration,
            **kwargs,
        )

from stadiamaps.model.pelias_layer import PeliasLayer
