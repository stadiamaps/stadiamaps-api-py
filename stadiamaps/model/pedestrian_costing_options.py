# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class PedestrianCostingOptions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class walking_speed(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 25
                    inclusive_minimum = 0
            walkway_factor = schemas.Float64Schema
            sidewalk_factor = schemas.Float64Schema
            alley_factor = schemas.Float64Schema
            driveway_factor = schemas.Float64Schema
            step_penalty = schemas.IntSchema
        
            @staticmethod
            def use_ferry() -> typing.Type['UseFerryCostingOption']:
                return UseFerryCostingOption
        
            @staticmethod
            def use_living_streets() -> typing.Type['UseLivingStreetsCostingOption']:
                return UseLivingStreetsCostingOption
        
            @staticmethod
            def use_tracks() -> typing.Type['UseTracksCostingOption']:
                return UseTracksCostingOption
        
            @staticmethod
            def use_hills() -> typing.Type['UseHillsCostingOption']:
                return UseHillsCostingOption
            
            
            class use_lit(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1
                    inclusive_minimum = 0
            service_penalty = schemas.IntSchema
            service_factor = schemas.Float64Schema
            
            
            class max_hiking_difficulty(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 6
                    inclusive_minimum = 1
            bss_rent_cost = schemas.IntSchema
            bss_rent_penalty = schemas.IntSchema
            __annotations__ = {
                "walking_speed": walking_speed,
                "walkway_factor": walkway_factor,
                "sidewalk_factor": sidewalk_factor,
                "alley_factor": alley_factor,
                "driveway_factor": driveway_factor,
                "step_penalty": step_penalty,
                "use_ferry": use_ferry,
                "use_living_streets": use_living_streets,
                "use_tracks": use_tracks,
                "use_hills": use_hills,
                "use_lit": use_lit,
                "service_penalty": service_penalty,
                "service_factor": service_factor,
                "max_hiking_difficulty": max_hiking_difficulty,
                "bss_rent_cost": bss_rent_cost,
                "bss_rent_penalty": bss_rent_penalty,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["walking_speed"]) -> MetaOapg.properties.walking_speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["walkway_factor"]) -> MetaOapg.properties.walkway_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sidewalk_factor"]) -> MetaOapg.properties.sidewalk_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alley_factor"]) -> MetaOapg.properties.alley_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["driveway_factor"]) -> MetaOapg.properties.driveway_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["step_penalty"]) -> MetaOapg.properties.step_penalty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_ferry"]) -> 'UseFerryCostingOption': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_living_streets"]) -> 'UseLivingStreetsCostingOption': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_tracks"]) -> 'UseTracksCostingOption': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_hills"]) -> 'UseHillsCostingOption': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_lit"]) -> MetaOapg.properties.use_lit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_penalty"]) -> MetaOapg.properties.service_penalty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_factor"]) -> MetaOapg.properties.service_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_hiking_difficulty"]) -> MetaOapg.properties.max_hiking_difficulty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bss_rent_cost"]) -> MetaOapg.properties.bss_rent_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bss_rent_penalty"]) -> MetaOapg.properties.bss_rent_penalty: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["walking_speed", "walkway_factor", "sidewalk_factor", "alley_factor", "driveway_factor", "step_penalty", "use_ferry", "use_living_streets", "use_tracks", "use_hills", "use_lit", "service_penalty", "service_factor", "max_hiking_difficulty", "bss_rent_cost", "bss_rent_penalty", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["walking_speed"]) -> typing.Union[MetaOapg.properties.walking_speed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["walkway_factor"]) -> typing.Union[MetaOapg.properties.walkway_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sidewalk_factor"]) -> typing.Union[MetaOapg.properties.sidewalk_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alley_factor"]) -> typing.Union[MetaOapg.properties.alley_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["driveway_factor"]) -> typing.Union[MetaOapg.properties.driveway_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["step_penalty"]) -> typing.Union[MetaOapg.properties.step_penalty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_ferry"]) -> typing.Union['UseFerryCostingOption', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_living_streets"]) -> typing.Union['UseLivingStreetsCostingOption', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_tracks"]) -> typing.Union['UseTracksCostingOption', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_hills"]) -> typing.Union['UseHillsCostingOption', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_lit"]) -> typing.Union[MetaOapg.properties.use_lit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_penalty"]) -> typing.Union[MetaOapg.properties.service_penalty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_factor"]) -> typing.Union[MetaOapg.properties.service_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_hiking_difficulty"]) -> typing.Union[MetaOapg.properties.max_hiking_difficulty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bss_rent_cost"]) -> typing.Union[MetaOapg.properties.bss_rent_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bss_rent_penalty"]) -> typing.Union[MetaOapg.properties.bss_rent_penalty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["walking_speed", "walkway_factor", "sidewalk_factor", "alley_factor", "driveway_factor", "step_penalty", "use_ferry", "use_living_streets", "use_tracks", "use_hills", "use_lit", "service_penalty", "service_factor", "max_hiking_difficulty", "bss_rent_cost", "bss_rent_penalty", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        walking_speed: typing.Union[MetaOapg.properties.walking_speed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        walkway_factor: typing.Union[MetaOapg.properties.walkway_factor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sidewalk_factor: typing.Union[MetaOapg.properties.sidewalk_factor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        alley_factor: typing.Union[MetaOapg.properties.alley_factor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        driveway_factor: typing.Union[MetaOapg.properties.driveway_factor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        step_penalty: typing.Union[MetaOapg.properties.step_penalty, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        use_ferry: typing.Union['UseFerryCostingOption', schemas.Unset] = schemas.unset,
        use_living_streets: typing.Union['UseLivingStreetsCostingOption', schemas.Unset] = schemas.unset,
        use_tracks: typing.Union['UseTracksCostingOption', schemas.Unset] = schemas.unset,
        use_hills: typing.Union['UseHillsCostingOption', schemas.Unset] = schemas.unset,
        use_lit: typing.Union[MetaOapg.properties.use_lit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        service_penalty: typing.Union[MetaOapg.properties.service_penalty, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        service_factor: typing.Union[MetaOapg.properties.service_factor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        max_hiking_difficulty: typing.Union[MetaOapg.properties.max_hiking_difficulty, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bss_rent_cost: typing.Union[MetaOapg.properties.bss_rent_cost, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bss_rent_penalty: typing.Union[MetaOapg.properties.bss_rent_penalty, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PedestrianCostingOptions':
        return super().__new__(
            cls,
            *_args,
            walking_speed=walking_speed,
            walkway_factor=walkway_factor,
            sidewalk_factor=sidewalk_factor,
            alley_factor=alley_factor,
            driveway_factor=driveway_factor,
            step_penalty=step_penalty,
            use_ferry=use_ferry,
            use_living_streets=use_living_streets,
            use_tracks=use_tracks,
            use_hills=use_hills,
            use_lit=use_lit,
            service_penalty=service_penalty,
            service_factor=service_factor,
            max_hiking_difficulty=max_hiking_difficulty,
            bss_rent_cost=bss_rent_cost,
            bss_rent_penalty=bss_rent_penalty,
            _configuration=_configuration,
            **kwargs,
        )

from stadiamaps.model.use_ferry_costing_option import UseFerryCostingOption
from stadiamaps.model.use_hills_costing_option import UseHillsCostingOption
from stadiamaps.model.use_living_streets_costing_option import UseLivingStreetsCostingOption
from stadiamaps.model.use_tracks_costing_option import UseTracksCostingOption
