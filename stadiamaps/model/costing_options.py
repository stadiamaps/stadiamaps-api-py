# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class CostingOptions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def auto() -> typing.Type['AutoCostingOptions']:
                return AutoCostingOptions
        
            @staticmethod
            def bus() -> typing.Type['AutoCostingOptions']:
                return AutoCostingOptions
        
            @staticmethod
            def taxi() -> typing.Type['AutoCostingOptions']:
                return AutoCostingOptions
        
            @staticmethod
            def truck() -> typing.Type['TruckCostingOptions']:
                return TruckCostingOptions
        
            @staticmethod
            def bicycle() -> typing.Type['BicycleCostingOptions']:
                return BicycleCostingOptions
        
            @staticmethod
            def motor_scooter() -> typing.Type['MotorScooterCostingOptions']:
                return MotorScooterCostingOptions
        
            @staticmethod
            def motorcycle() -> typing.Type['MotorcycleCostingOptions']:
                return MotorcycleCostingOptions
        
            @staticmethod
            def pedestrian() -> typing.Type['PedestrianCostingOptions']:
                return PedestrianCostingOptions
            __annotations__ = {
                "auto": auto,
                "bus": bus,
                "taxi": taxi,
                "truck": truck,
                "bicycle": bicycle,
                "motor_scooter": motor_scooter,
                "motorcycle": motorcycle,
                "pedestrian": pedestrian,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto"]) -> 'AutoCostingOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bus"]) -> 'AutoCostingOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxi"]) -> 'AutoCostingOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["truck"]) -> 'TruckCostingOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bicycle"]) -> 'BicycleCostingOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["motor_scooter"]) -> 'MotorScooterCostingOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["motorcycle"]) -> 'MotorcycleCostingOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pedestrian"]) -> 'PedestrianCostingOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["auto", "bus", "taxi", "truck", "bicycle", "motor_scooter", "motorcycle", "pedestrian", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto"]) -> typing.Union['AutoCostingOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bus"]) -> typing.Union['AutoCostingOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxi"]) -> typing.Union['AutoCostingOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["truck"]) -> typing.Union['TruckCostingOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bicycle"]) -> typing.Union['BicycleCostingOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["motor_scooter"]) -> typing.Union['MotorScooterCostingOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["motorcycle"]) -> typing.Union['MotorcycleCostingOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pedestrian"]) -> typing.Union['PedestrianCostingOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["auto", "bus", "taxi", "truck", "bicycle", "motor_scooter", "motorcycle", "pedestrian", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        auto: typing.Union['AutoCostingOptions', schemas.Unset] = schemas.unset,
        bus: typing.Union['AutoCostingOptions', schemas.Unset] = schemas.unset,
        taxi: typing.Union['AutoCostingOptions', schemas.Unset] = schemas.unset,
        truck: typing.Union['TruckCostingOptions', schemas.Unset] = schemas.unset,
        bicycle: typing.Union['BicycleCostingOptions', schemas.Unset] = schemas.unset,
        motor_scooter: typing.Union['MotorScooterCostingOptions', schemas.Unset] = schemas.unset,
        motorcycle: typing.Union['MotorcycleCostingOptions', schemas.Unset] = schemas.unset,
        pedestrian: typing.Union['PedestrianCostingOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CostingOptions':
        return super().__new__(
            cls,
            *_args,
            auto=auto,
            bus=bus,
            taxi=taxi,
            truck=truck,
            bicycle=bicycle,
            motor_scooter=motor_scooter,
            motorcycle=motorcycle,
            pedestrian=pedestrian,
            _configuration=_configuration,
            **kwargs,
        )

from stadiamaps.model.auto_costing_options import AutoCostingOptions
from stadiamaps.model.bicycle_costing_options import BicycleCostingOptions
from stadiamaps.model.motor_scooter_costing_options import MotorScooterCostingOptions
from stadiamaps.model.motorcycle_costing_options import MotorcycleCostingOptions
from stadiamaps.model.pedestrian_costing_options import PedestrianCostingOptions
from stadiamaps.model.truck_costing_options import TruckCostingOptions
