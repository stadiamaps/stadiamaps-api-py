# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class BaseTraceRequest(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "costing",
        }
        
        class properties:
        
            @staticmethod
            def costing() -> typing.Type['MapMatchCostingModel']:
                return MapMatchCostingModel
            id = schemas.StrSchema
            
            
            class shape(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MapMatchWaypoint']:
                        return MapMatchWaypoint
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MapMatchWaypoint'], typing.List['MapMatchWaypoint']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shape':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MapMatchWaypoint':
                    return super().__getitem__(i)
            encoded_polyline = schemas.StrSchema
        
            @staticmethod
            def costing_options() -> typing.Type['CostingOptions']:
                return CostingOptions
            
            
            class shape_match(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "edge_walk": "EDGE_WALK",
                        "map_snap": "MAP_SNAP",
                        "walk_or_snap": "WALK_OR_SNAP",
                    }
                
                @schemas.classproperty
                def EDGE_WALK(cls):
                    return cls("edge_walk")
                
                @schemas.classproperty
                def MAP_SNAP(cls):
                    return cls("map_snap")
                
                @schemas.classproperty
                def WALK_OR_SNAP(cls):
                    return cls("walk_or_snap")
        
            @staticmethod
            def directions_options() -> typing.Type['DirectionsOptions']:
                return DirectionsOptions
            __annotations__ = {
                "costing": costing,
                "id": id,
                "shape": shape,
                "encoded_polyline": encoded_polyline,
                "costing_options": costing_options,
                "shape_match": shape_match,
                "directions_options": directions_options,
            }

    
    costing: 'MapMatchCostingModel'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costing"]) -> 'MapMatchCostingModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shape"]) -> MetaOapg.properties.shape: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encoded_polyline"]) -> MetaOapg.properties.encoded_polyline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costing_options"]) -> 'CostingOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shape_match"]) -> MetaOapg.properties.shape_match: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["directions_options"]) -> 'DirectionsOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["costing", "id", "shape", "encoded_polyline", "costing_options", "shape_match", "directions_options", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costing"]) -> 'MapMatchCostingModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shape"]) -> typing.Union[MetaOapg.properties.shape, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encoded_polyline"]) -> typing.Union[MetaOapg.properties.encoded_polyline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costing_options"]) -> typing.Union['CostingOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shape_match"]) -> typing.Union[MetaOapg.properties.shape_match, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["directions_options"]) -> typing.Union['DirectionsOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["costing", "id", "shape", "encoded_polyline", "costing_options", "shape_match", "directions_options", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        costing: 'MapMatchCostingModel',
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        shape: typing.Union[MetaOapg.properties.shape, list, tuple, schemas.Unset] = schemas.unset,
        encoded_polyline: typing.Union[MetaOapg.properties.encoded_polyline, str, schemas.Unset] = schemas.unset,
        costing_options: typing.Union['CostingOptions', schemas.Unset] = schemas.unset,
        shape_match: typing.Union[MetaOapg.properties.shape_match, str, schemas.Unset] = schemas.unset,
        directions_options: typing.Union['DirectionsOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BaseTraceRequest':
        return super().__new__(
            cls,
            *_args,
            costing=costing,
            id=id,
            shape=shape,
            encoded_polyline=encoded_polyline,
            costing_options=costing_options,
            shape_match=shape_match,
            directions_options=directions_options,
            _configuration=_configuration,
            **kwargs,
        )

from stadiamaps.model.costing_options import CostingOptions
from stadiamaps.model.directions_options import DirectionsOptions
from stadiamaps.model.map_match_costing_model import MapMatchCostingModel
from stadiamaps.model.map_match_waypoint import MapMatchWaypoint
