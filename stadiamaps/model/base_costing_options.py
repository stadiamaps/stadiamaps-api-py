# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class BaseCostingOptions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            maneuver_penalty = schemas.IntSchema
            gate_cost = schemas.IntSchema
            gate_penalty = schemas.IntSchema
            country_crossing_cost = schemas.IntSchema
            country_crossing_penalty = schemas.IntSchema
            service_penalty = schemas.IntSchema
            service_factor = schemas.Float64Schema
        
            @staticmethod
            def use_living_streets() -> typing.Type['UseLivingStreetsCostingOption']:
                return UseLivingStreetsCostingOption
        
            @staticmethod
            def use_ferry() -> typing.Type['UseFerryCostingOption']:
                return UseFerryCostingOption
            __annotations__ = {
                "maneuver_penalty": maneuver_penalty,
                "gate_cost": gate_cost,
                "gate_penalty": gate_penalty,
                "country_crossing_cost": country_crossing_cost,
                "country_crossing_penalty": country_crossing_penalty,
                "service_penalty": service_penalty,
                "service_factor": service_factor,
                "use_living_streets": use_living_streets,
                "use_ferry": use_ferry,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maneuver_penalty"]) -> MetaOapg.properties.maneuver_penalty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gate_cost"]) -> MetaOapg.properties.gate_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gate_penalty"]) -> MetaOapg.properties.gate_penalty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_crossing_cost"]) -> MetaOapg.properties.country_crossing_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_crossing_penalty"]) -> MetaOapg.properties.country_crossing_penalty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_penalty"]) -> MetaOapg.properties.service_penalty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_factor"]) -> MetaOapg.properties.service_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_living_streets"]) -> 'UseLivingStreetsCostingOption': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_ferry"]) -> 'UseFerryCostingOption': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["maneuver_penalty", "gate_cost", "gate_penalty", "country_crossing_cost", "country_crossing_penalty", "service_penalty", "service_factor", "use_living_streets", "use_ferry", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maneuver_penalty"]) -> typing.Union[MetaOapg.properties.maneuver_penalty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gate_cost"]) -> typing.Union[MetaOapg.properties.gate_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gate_penalty"]) -> typing.Union[MetaOapg.properties.gate_penalty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_crossing_cost"]) -> typing.Union[MetaOapg.properties.country_crossing_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_crossing_penalty"]) -> typing.Union[MetaOapg.properties.country_crossing_penalty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_penalty"]) -> typing.Union[MetaOapg.properties.service_penalty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_factor"]) -> typing.Union[MetaOapg.properties.service_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_living_streets"]) -> typing.Union['UseLivingStreetsCostingOption', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_ferry"]) -> typing.Union['UseFerryCostingOption', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["maneuver_penalty", "gate_cost", "gate_penalty", "country_crossing_cost", "country_crossing_penalty", "service_penalty", "service_factor", "use_living_streets", "use_ferry", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        maneuver_penalty: typing.Union[MetaOapg.properties.maneuver_penalty, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        gate_cost: typing.Union[MetaOapg.properties.gate_cost, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        gate_penalty: typing.Union[MetaOapg.properties.gate_penalty, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        country_crossing_cost: typing.Union[MetaOapg.properties.country_crossing_cost, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        country_crossing_penalty: typing.Union[MetaOapg.properties.country_crossing_penalty, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        service_penalty: typing.Union[MetaOapg.properties.service_penalty, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        service_factor: typing.Union[MetaOapg.properties.service_factor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        use_living_streets: typing.Union['UseLivingStreetsCostingOption', schemas.Unset] = schemas.unset,
        use_ferry: typing.Union['UseFerryCostingOption', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BaseCostingOptions':
        return super().__new__(
            cls,
            *_args,
            maneuver_penalty=maneuver_penalty,
            gate_cost=gate_cost,
            gate_penalty=gate_penalty,
            country_crossing_cost=country_crossing_cost,
            country_crossing_penalty=country_crossing_penalty,
            service_penalty=service_penalty,
            service_factor=service_factor,
            use_living_streets=use_living_streets,
            use_ferry=use_ferry,
            _configuration=_configuration,
            **kwargs,
        )

from stadiamaps.model.use_ferry_costing_option import UseFerryCostingOption
from stadiamaps.model.use_living_streets_costing_option import UseLivingStreetsCostingOption
