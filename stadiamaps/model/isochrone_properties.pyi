# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class IsochroneProperties(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            fillColor = schemas.StrSchema
            opacity = schemas.Float32Schema
            fill = schemas.StrSchema
            fillOpacity = schemas.Float32Schema
            color = schemas.StrSchema
            contour = schemas.Float32Schema
            
            
            class metric(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TIME(cls):
                    return cls("time")
                
                @schemas.classproperty
                def DISTANCE(cls):
                    return cls("distance")
            __annotations__ = {
                "fillColor": fillColor,
                "opacity": opacity,
                "fill": fill,
                "fillOpacity": fillOpacity,
                "color": color,
                "contour": contour,
                "metric": metric,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillColor"]) -> MetaOapg.properties.fillColor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opacity"]) -> MetaOapg.properties.opacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fill"]) -> MetaOapg.properties.fill: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillOpacity"]) -> MetaOapg.properties.fillOpacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contour"]) -> MetaOapg.properties.contour: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metric"]) -> MetaOapg.properties.metric: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fillColor", "opacity", "fill", "fillOpacity", "color", "contour", "metric", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillColor"]) -> typing.Union[MetaOapg.properties.fillColor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opacity"]) -> typing.Union[MetaOapg.properties.opacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fill"]) -> typing.Union[MetaOapg.properties.fill, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillOpacity"]) -> typing.Union[MetaOapg.properties.fillOpacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union[MetaOapg.properties.color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contour"]) -> typing.Union[MetaOapg.properties.contour, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metric"]) -> typing.Union[MetaOapg.properties.metric, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fillColor", "opacity", "fill", "fillOpacity", "color", "contour", "metric", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        fillColor: typing.Union[MetaOapg.properties.fillColor, str, schemas.Unset] = schemas.unset,
        opacity: typing.Union[MetaOapg.properties.opacity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fill: typing.Union[MetaOapg.properties.fill, str, schemas.Unset] = schemas.unset,
        fillOpacity: typing.Union[MetaOapg.properties.fillOpacity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        color: typing.Union[MetaOapg.properties.color, str, schemas.Unset] = schemas.unset,
        contour: typing.Union[MetaOapg.properties.contour, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        metric: typing.Union[MetaOapg.properties.metric, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IsochroneProperties':
        return super().__new__(
            cls,
            *_args,
            fillColor=fillColor,
            opacity=opacity,
            fill=fill,
            fillOpacity=fillOpacity,
            color=color,
            contour=contour,
            metric=metric,
            _configuration=_configuration,
            **kwargs,
        )
