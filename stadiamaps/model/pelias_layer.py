# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class PeliasLayer(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Our database is organized into several layers (in the GIS sense of the term) as follows:

- `venue`: Points of interest, businesses, and things with walls
- `address`: Places with a street address
- `street`: Streets, roads, highways
- `county`: Places that issue passports, nations, nation-states
- `macroregion`: A related group of regions (mostly in Europe)
- `region`: The first administrative division within a country (usually states and provinces)
- `macrocounty`: A related group of counties (mostly in Europe)
- `county`: Official governmental areas; usually bigger than a locality, but almost always smaller than a region
- `locality`: Towns, hamlets, cities, etc.
- `localadmin`: Local administrative boundaries
- `borough`: Local administrative boundaries within cities (not widely used, but present in places such as NYC and Mexico City)
- `neighbourhood`: Social communities and neighborhoods (note the British spelling in the API!)
- `postalcode`: Postal codes used by mail services (note: not used for reverse geocoding)
- `coarse`: An alias for simultaneously using all administrative layers (everything except `venue` and `address`)

    """


    class MetaOapg:
        enum_value_to_name = {
            "venue": "VENUE",
            "address": "ADDRESS",
            "street": "STREET",
            "country": "COUNTRY",
            "macroregion": "MACROREGION",
            "region": "REGION",
            "macrocounty": "MACROCOUNTY",
            "county": "COUNTY",
            "locality": "LOCALITY",
            "localadmin": "LOCALADMIN",
            "borough": "BOROUGH",
            "neighbourhood": "NEIGHBOURHOOD",
            "postalcode": "POSTALCODE",
            "coarse": "COARSE",
        }
    
    @schemas.classproperty
    def VENUE(cls):
        return cls("venue")
    
    @schemas.classproperty
    def ADDRESS(cls):
        return cls("address")
    
    @schemas.classproperty
    def STREET(cls):
        return cls("street")
    
    @schemas.classproperty
    def COUNTRY(cls):
        return cls("country")
    
    @schemas.classproperty
    def MACROREGION(cls):
        return cls("macroregion")
    
    @schemas.classproperty
    def REGION(cls):
        return cls("region")
    
    @schemas.classproperty
    def MACROCOUNTY(cls):
        return cls("macrocounty")
    
    @schemas.classproperty
    def COUNTY(cls):
        return cls("county")
    
    @schemas.classproperty
    def LOCALITY(cls):
        return cls("locality")
    
    @schemas.classproperty
    def LOCALADMIN(cls):
        return cls("localadmin")
    
    @schemas.classproperty
    def BOROUGH(cls):
        return cls("borough")
    
    @schemas.classproperty
    def NEIGHBOURHOOD(cls):
        return cls("neighbourhood")
    
    @schemas.classproperty
    def POSTALCODE(cls):
        return cls("postalcode")
    
    @schemas.classproperty
    def COARSE(cls):
        return cls("coarse")
