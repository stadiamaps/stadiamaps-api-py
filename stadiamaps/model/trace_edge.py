# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class TraceEdge(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            length = schemas.Float64Schema
            speed = schemas.IntSchema
        
            @staticmethod
            def road_class() -> typing.Type['RoadClass']:
                return RoadClass
            begin_heading = schemas.IntSchema
            end_heading = schemas.IntSchema
            begin_shape_index = schemas.IntSchema
            end_shape_index = schemas.IntSchema
        
            @staticmethod
            def traversability() -> typing.Type['Traversability']:
                return Traversability
        
            @staticmethod
            def use() -> typing.Type['EdgeUse']:
                return EdgeUse
            toll = schemas.BoolSchema
            unpaved = schemas.BoolSchema
            tunnel = schemas.BoolSchema
            bridge = schemas.BoolSchema
            roundabout = schemas.BoolSchema
            internal_intersection = schemas.BoolSchema
            drive_on_right = schemas.BoolSchema
            
            
            class surface(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "paved_smooth": "PAVED_SMOOTH",
                        "paved": "PAVED",
                        "paved_rough": "PAVED_ROUGH",
                        "compacted": "COMPACTED",
                        "dirt": "DIRT",
                        "gravel": "GRAVEL",
                        "path": "PATH",
                        "impassable": "IMPASSABLE",
                    }
                
                @schemas.classproperty
                def PAVED_SMOOTH(cls):
                    return cls("paved_smooth")
                
                @schemas.classproperty
                def PAVED(cls):
                    return cls("paved")
                
                @schemas.classproperty
                def PAVED_ROUGH(cls):
                    return cls("paved_rough")
                
                @schemas.classproperty
                def COMPACTED(cls):
                    return cls("compacted")
                
                @schemas.classproperty
                def DIRT(cls):
                    return cls("dirt")
                
                @schemas.classproperty
                def GRAVEL(cls):
                    return cls("gravel")
                
                @schemas.classproperty
                def PATH(cls):
                    return cls("path")
                
                @schemas.classproperty
                def IMPASSABLE(cls):
                    return cls("impassable")
        
            @staticmethod
            def sign() -> typing.Type['EdgeSign']:
                return EdgeSign
        
            @staticmethod
            def travel_mode() -> typing.Type['TravelMode']:
                return TravelMode
            
            
            class vehicle_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "car": "CAR",
                        "motorcycle": "MOTORCYCLE",
                        "bus": "BUS",
                        "tractor_trailer": "TRACTOR_TRAILER",
                    }
                
                @schemas.classproperty
                def CAR(cls):
                    return cls("car")
                
                @schemas.classproperty
                def MOTORCYCLE(cls):
                    return cls("motorcycle")
                
                @schemas.classproperty
                def BUS(cls):
                    return cls("bus")
                
                @schemas.classproperty
                def TRACTOR_TRAILER(cls):
                    return cls("tractor_trailer")
            
            
            class pedestrian_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "foot": "FOOT",
                        "wheelchair": "WHEELCHAIR",
                        "segway": "SEGWAY",
                    }
                
                @schemas.classproperty
                def FOOT(cls):
                    return cls("foot")
                
                @schemas.classproperty
                def WHEELCHAIR(cls):
                    return cls("wheelchair")
                
                @schemas.classproperty
                def SEGWAY(cls):
                    return cls("segway")
            
            
            class bicycle_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "road": "ROAD",
                        "cross": "CROSS",
                        "hybrid": "HYBRID",
                        "mountain": "MOUNTAIN",
                    }
                
                @schemas.classproperty
                def ROAD(cls):
                    return cls("road")
                
                @schemas.classproperty
                def CROSS(cls):
                    return cls("cross")
                
                @schemas.classproperty
                def HYBRID(cls):
                    return cls("hybrid")
                
                @schemas.classproperty
                def MOUNTAIN(cls):
                    return cls("mountain")
            
            
            class transit_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "tram": "TRAM",
                        "metro": "METRO",
                        "rail": "RAIL",
                        "bus": "BUS",
                        "ferry": "FERRY",
                        "cable_car": "CABLE_CAR",
                        "gondola": "GONDOLA",
                        "funicular": "FUNICULAR",
                    }
                
                @schemas.classproperty
                def TRAM(cls):
                    return cls("tram")
                
                @schemas.classproperty
                def METRO(cls):
                    return cls("metro")
                
                @schemas.classproperty
                def RAIL(cls):
                    return cls("rail")
                
                @schemas.classproperty
                def BUS(cls):
                    return cls("bus")
                
                @schemas.classproperty
                def FERRY(cls):
                    return cls("ferry")
                
                @schemas.classproperty
                def CABLE_CAR(cls):
                    return cls("cable_car")
                
                @schemas.classproperty
                def GONDOLA(cls):
                    return cls("gondola")
                
                @schemas.classproperty
                def FUNICULAR(cls):
                    return cls("funicular")
            id = schemas.Int64Schema
            way_id = schemas.Int64Schema
            weighted_grade = schemas.Float64Schema
            max_upward_grade = schemas.IntSchema
            max_downward_grade = schemas.IntSchema
            mean_elevation = schemas.IntSchema
            lane_count = schemas.IntSchema
            
            
            class cycle_lane(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "none": "NONE",
                        "shared": "SHARED",
                        "dedicated": "DEDICATED",
                        "separated": "SEPARATED",
                    }
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("none")
                
                @schemas.classproperty
                def SHARED(cls):
                    return cls("shared")
                
                @schemas.classproperty
                def DEDICATED(cls):
                    return cls("dedicated")
                
                @schemas.classproperty
                def SEPARATED(cls):
                    return cls("separated")
            bicycle_network = schemas.IntSchema
            sac_scale = schemas.IntSchema
            
            
            class sidewalk(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "left": "LEFT",
                        "right": "RIGHT",
                        "both": "BOTH",
                        "none": "NONE",
                    }
                
                @schemas.classproperty
                def LEFT(cls):
                    return cls("left")
                
                @schemas.classproperty
                def RIGHT(cls):
                    return cls("right")
                
                @schemas.classproperty
                def BOTH(cls):
                    return cls("both")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("none")
            density = schemas.IntSchema
            speed_limit = schemas.AnyTypeSchema
            truck_speed = schemas.IntSchema
            truck_route = schemas.BoolSchema
        
            @staticmethod
            def end_node() -> typing.Type['EndNode']:
                return EndNode
            __annotations__ = {
                "names": names,
                "length": length,
                "speed": speed,
                "road_class": road_class,
                "begin_heading": begin_heading,
                "end_heading": end_heading,
                "begin_shape_index": begin_shape_index,
                "end_shape_index": end_shape_index,
                "traversability": traversability,
                "use": use,
                "toll": toll,
                "unpaved": unpaved,
                "tunnel": tunnel,
                "bridge": bridge,
                "roundabout": roundabout,
                "internal_intersection": internal_intersection,
                "drive_on_right": drive_on_right,
                "surface": surface,
                "sign": sign,
                "travel_mode": travel_mode,
                "vehicle_type": vehicle_type,
                "pedestrian_type": pedestrian_type,
                "bicycle_type": bicycle_type,
                "transit_type": transit_type,
                "id": id,
                "way_id": way_id,
                "weighted_grade": weighted_grade,
                "max_upward_grade": max_upward_grade,
                "max_downward_grade": max_downward_grade,
                "mean_elevation": mean_elevation,
                "lane_count": lane_count,
                "cycle_lane": cycle_lane,
                "bicycle_network": bicycle_network,
                "sac_scale": sac_scale,
                "sidewalk": sidewalk,
                "density": density,
                "speed_limit": speed_limit,
                "truck_speed": truck_speed,
                "truck_route": truck_route,
                "end_node": end_node,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["names"]) -> MetaOapg.properties.names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed"]) -> MetaOapg.properties.speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["road_class"]) -> 'RoadClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["begin_heading"]) -> MetaOapg.properties.begin_heading: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_heading"]) -> MetaOapg.properties.end_heading: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["begin_shape_index"]) -> MetaOapg.properties.begin_shape_index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_shape_index"]) -> MetaOapg.properties.end_shape_index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traversability"]) -> 'Traversability': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use"]) -> 'EdgeUse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toll"]) -> MetaOapg.properties.toll: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unpaved"]) -> MetaOapg.properties.unpaved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tunnel"]) -> MetaOapg.properties.tunnel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bridge"]) -> MetaOapg.properties.bridge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roundabout"]) -> MetaOapg.properties.roundabout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internal_intersection"]) -> MetaOapg.properties.internal_intersection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["drive_on_right"]) -> MetaOapg.properties.drive_on_right: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surface"]) -> MetaOapg.properties.surface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sign"]) -> 'EdgeSign': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["travel_mode"]) -> 'TravelMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vehicle_type"]) -> MetaOapg.properties.vehicle_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pedestrian_type"]) -> MetaOapg.properties.pedestrian_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bicycle_type"]) -> MetaOapg.properties.bicycle_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transit_type"]) -> MetaOapg.properties.transit_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["way_id"]) -> MetaOapg.properties.way_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weighted_grade"]) -> MetaOapg.properties.weighted_grade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_upward_grade"]) -> MetaOapg.properties.max_upward_grade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_downward_grade"]) -> MetaOapg.properties.max_downward_grade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mean_elevation"]) -> MetaOapg.properties.mean_elevation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lane_count"]) -> MetaOapg.properties.lane_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycle_lane"]) -> MetaOapg.properties.cycle_lane: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bicycle_network"]) -> MetaOapg.properties.bicycle_network: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sac_scale"]) -> MetaOapg.properties.sac_scale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sidewalk"]) -> MetaOapg.properties.sidewalk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["density"]) -> MetaOapg.properties.density: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed_limit"]) -> MetaOapg.properties.speed_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["truck_speed"]) -> MetaOapg.properties.truck_speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["truck_route"]) -> MetaOapg.properties.truck_route: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_node"]) -> 'EndNode': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["names", "length", "speed", "road_class", "begin_heading", "end_heading", "begin_shape_index", "end_shape_index", "traversability", "use", "toll", "unpaved", "tunnel", "bridge", "roundabout", "internal_intersection", "drive_on_right", "surface", "sign", "travel_mode", "vehicle_type", "pedestrian_type", "bicycle_type", "transit_type", "id", "way_id", "weighted_grade", "max_upward_grade", "max_downward_grade", "mean_elevation", "lane_count", "cycle_lane", "bicycle_network", "sac_scale", "sidewalk", "density", "speed_limit", "truck_speed", "truck_route", "end_node", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["names"]) -> typing.Union[MetaOapg.properties.names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed"]) -> typing.Union[MetaOapg.properties.speed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["road_class"]) -> typing.Union['RoadClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["begin_heading"]) -> typing.Union[MetaOapg.properties.begin_heading, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_heading"]) -> typing.Union[MetaOapg.properties.end_heading, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["begin_shape_index"]) -> typing.Union[MetaOapg.properties.begin_shape_index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_shape_index"]) -> typing.Union[MetaOapg.properties.end_shape_index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traversability"]) -> typing.Union['Traversability', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use"]) -> typing.Union['EdgeUse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toll"]) -> typing.Union[MetaOapg.properties.toll, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unpaved"]) -> typing.Union[MetaOapg.properties.unpaved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tunnel"]) -> typing.Union[MetaOapg.properties.tunnel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bridge"]) -> typing.Union[MetaOapg.properties.bridge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roundabout"]) -> typing.Union[MetaOapg.properties.roundabout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internal_intersection"]) -> typing.Union[MetaOapg.properties.internal_intersection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["drive_on_right"]) -> typing.Union[MetaOapg.properties.drive_on_right, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surface"]) -> typing.Union[MetaOapg.properties.surface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sign"]) -> typing.Union['EdgeSign', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["travel_mode"]) -> typing.Union['TravelMode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vehicle_type"]) -> typing.Union[MetaOapg.properties.vehicle_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pedestrian_type"]) -> typing.Union[MetaOapg.properties.pedestrian_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bicycle_type"]) -> typing.Union[MetaOapg.properties.bicycle_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transit_type"]) -> typing.Union[MetaOapg.properties.transit_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["way_id"]) -> typing.Union[MetaOapg.properties.way_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weighted_grade"]) -> typing.Union[MetaOapg.properties.weighted_grade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_upward_grade"]) -> typing.Union[MetaOapg.properties.max_upward_grade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_downward_grade"]) -> typing.Union[MetaOapg.properties.max_downward_grade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mean_elevation"]) -> typing.Union[MetaOapg.properties.mean_elevation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lane_count"]) -> typing.Union[MetaOapg.properties.lane_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycle_lane"]) -> typing.Union[MetaOapg.properties.cycle_lane, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bicycle_network"]) -> typing.Union[MetaOapg.properties.bicycle_network, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sac_scale"]) -> typing.Union[MetaOapg.properties.sac_scale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sidewalk"]) -> typing.Union[MetaOapg.properties.sidewalk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["density"]) -> typing.Union[MetaOapg.properties.density, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed_limit"]) -> typing.Union[MetaOapg.properties.speed_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["truck_speed"]) -> typing.Union[MetaOapg.properties.truck_speed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["truck_route"]) -> typing.Union[MetaOapg.properties.truck_route, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_node"]) -> typing.Union['EndNode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["names", "length", "speed", "road_class", "begin_heading", "end_heading", "begin_shape_index", "end_shape_index", "traversability", "use", "toll", "unpaved", "tunnel", "bridge", "roundabout", "internal_intersection", "drive_on_right", "surface", "sign", "travel_mode", "vehicle_type", "pedestrian_type", "bicycle_type", "transit_type", "id", "way_id", "weighted_grade", "max_upward_grade", "max_downward_grade", "mean_elevation", "lane_count", "cycle_lane", "bicycle_network", "sac_scale", "sidewalk", "density", "speed_limit", "truck_speed", "truck_route", "end_node", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        names: typing.Union[MetaOapg.properties.names, list, tuple, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        speed: typing.Union[MetaOapg.properties.speed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        road_class: typing.Union['RoadClass', schemas.Unset] = schemas.unset,
        begin_heading: typing.Union[MetaOapg.properties.begin_heading, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        end_heading: typing.Union[MetaOapg.properties.end_heading, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        begin_shape_index: typing.Union[MetaOapg.properties.begin_shape_index, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        end_shape_index: typing.Union[MetaOapg.properties.end_shape_index, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        traversability: typing.Union['Traversability', schemas.Unset] = schemas.unset,
        use: typing.Union['EdgeUse', schemas.Unset] = schemas.unset,
        toll: typing.Union[MetaOapg.properties.toll, bool, schemas.Unset] = schemas.unset,
        unpaved: typing.Union[MetaOapg.properties.unpaved, bool, schemas.Unset] = schemas.unset,
        tunnel: typing.Union[MetaOapg.properties.tunnel, bool, schemas.Unset] = schemas.unset,
        bridge: typing.Union[MetaOapg.properties.bridge, bool, schemas.Unset] = schemas.unset,
        roundabout: typing.Union[MetaOapg.properties.roundabout, bool, schemas.Unset] = schemas.unset,
        internal_intersection: typing.Union[MetaOapg.properties.internal_intersection, bool, schemas.Unset] = schemas.unset,
        drive_on_right: typing.Union[MetaOapg.properties.drive_on_right, bool, schemas.Unset] = schemas.unset,
        surface: typing.Union[MetaOapg.properties.surface, str, schemas.Unset] = schemas.unset,
        sign: typing.Union['EdgeSign', schemas.Unset] = schemas.unset,
        travel_mode: typing.Union['TravelMode', schemas.Unset] = schemas.unset,
        vehicle_type: typing.Union[MetaOapg.properties.vehicle_type, str, schemas.Unset] = schemas.unset,
        pedestrian_type: typing.Union[MetaOapg.properties.pedestrian_type, str, schemas.Unset] = schemas.unset,
        bicycle_type: typing.Union[MetaOapg.properties.bicycle_type, str, schemas.Unset] = schemas.unset,
        transit_type: typing.Union[MetaOapg.properties.transit_type, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        way_id: typing.Union[MetaOapg.properties.way_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        weighted_grade: typing.Union[MetaOapg.properties.weighted_grade, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        max_upward_grade: typing.Union[MetaOapg.properties.max_upward_grade, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_downward_grade: typing.Union[MetaOapg.properties.max_downward_grade, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mean_elevation: typing.Union[MetaOapg.properties.mean_elevation, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lane_count: typing.Union[MetaOapg.properties.lane_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cycle_lane: typing.Union[MetaOapg.properties.cycle_lane, str, schemas.Unset] = schemas.unset,
        bicycle_network: typing.Union[MetaOapg.properties.bicycle_network, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sac_scale: typing.Union[MetaOapg.properties.sac_scale, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sidewalk: typing.Union[MetaOapg.properties.sidewalk, str, schemas.Unset] = schemas.unset,
        density: typing.Union[MetaOapg.properties.density, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        speed_limit: typing.Union[MetaOapg.properties.speed_limit, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        truck_speed: typing.Union[MetaOapg.properties.truck_speed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        truck_route: typing.Union[MetaOapg.properties.truck_route, bool, schemas.Unset] = schemas.unset,
        end_node: typing.Union['EndNode', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TraceEdge':
        return super().__new__(
            cls,
            *_args,
            names=names,
            length=length,
            speed=speed,
            road_class=road_class,
            begin_heading=begin_heading,
            end_heading=end_heading,
            begin_shape_index=begin_shape_index,
            end_shape_index=end_shape_index,
            traversability=traversability,
            use=use,
            toll=toll,
            unpaved=unpaved,
            tunnel=tunnel,
            bridge=bridge,
            roundabout=roundabout,
            internal_intersection=internal_intersection,
            drive_on_right=drive_on_right,
            surface=surface,
            sign=sign,
            travel_mode=travel_mode,
            vehicle_type=vehicle_type,
            pedestrian_type=pedestrian_type,
            bicycle_type=bicycle_type,
            transit_type=transit_type,
            id=id,
            way_id=way_id,
            weighted_grade=weighted_grade,
            max_upward_grade=max_upward_grade,
            max_downward_grade=max_downward_grade,
            mean_elevation=mean_elevation,
            lane_count=lane_count,
            cycle_lane=cycle_lane,
            bicycle_network=bicycle_network,
            sac_scale=sac_scale,
            sidewalk=sidewalk,
            density=density,
            speed_limit=speed_limit,
            truck_speed=truck_speed,
            truck_route=truck_route,
            end_node=end_node,
            _configuration=_configuration,
            **kwargs,
        )

from stadiamaps.model.edge_sign import EdgeSign
from stadiamaps.model.edge_use import EdgeUse
from stadiamaps.model.end_node import EndNode
from stadiamaps.model.road_class import RoadClass
from stadiamaps.model.travel_mode import TravelMode
from stadiamaps.model.traversability import Traversability
