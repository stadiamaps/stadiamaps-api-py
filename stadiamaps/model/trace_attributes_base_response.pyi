# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class TraceAttributesBaseResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class edges(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TraceEdge']:
                        return TraceEdge
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TraceEdge'], typing.List['TraceEdge']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'edges':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TraceEdge':
                    return super().__getitem__(i)
            
            
            class admins(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AdminRegion']:
                        return AdminRegion
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AdminRegion'], typing.List['AdminRegion']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'admins':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AdminRegion':
                    return super().__getitem__(i)
            
            
            class matched_points(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MatchedPoint']:
                        return MatchedPoint
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MatchedPoint'], typing.List['MatchedPoint']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'matched_points':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MatchedPoint':
                    return super().__getitem__(i)
            osm_changeset = schemas.IntSchema
            shape = schemas.StrSchema
            
            
            class confidence_score(
                schemas.Float64Schema
            ):
                pass
            __annotations__ = {
                "edges": edges,
                "admins": admins,
                "matched_points": matched_points,
                "osm_changeset": osm_changeset,
                "shape": shape,
                "confidence_score": confidence_score,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edges"]) -> MetaOapg.properties.edges: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admins"]) -> MetaOapg.properties.admins: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matched_points"]) -> MetaOapg.properties.matched_points: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["osm_changeset"]) -> MetaOapg.properties.osm_changeset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shape"]) -> MetaOapg.properties.shape: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confidence_score"]) -> MetaOapg.properties.confidence_score: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["edges", "admins", "matched_points", "osm_changeset", "shape", "confidence_score", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edges"]) -> typing.Union[MetaOapg.properties.edges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admins"]) -> typing.Union[MetaOapg.properties.admins, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matched_points"]) -> typing.Union[MetaOapg.properties.matched_points, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["osm_changeset"]) -> typing.Union[MetaOapg.properties.osm_changeset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shape"]) -> typing.Union[MetaOapg.properties.shape, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confidence_score"]) -> typing.Union[MetaOapg.properties.confidence_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["edges", "admins", "matched_points", "osm_changeset", "shape", "confidence_score", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        edges: typing.Union[MetaOapg.properties.edges, list, tuple, schemas.Unset] = schemas.unset,
        admins: typing.Union[MetaOapg.properties.admins, list, tuple, schemas.Unset] = schemas.unset,
        matched_points: typing.Union[MetaOapg.properties.matched_points, list, tuple, schemas.Unset] = schemas.unset,
        osm_changeset: typing.Union[MetaOapg.properties.osm_changeset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        shape: typing.Union[MetaOapg.properties.shape, str, schemas.Unset] = schemas.unset,
        confidence_score: typing.Union[MetaOapg.properties.confidence_score, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TraceAttributesBaseResponse':
        return super().__new__(
            cls,
            *_args,
            edges=edges,
            admins=admins,
            matched_points=matched_points,
            osm_changeset=osm_changeset,
            shape=shape,
            confidence_score=confidence_score,
            _configuration=_configuration,
            **kwargs,
        )

from stadiamaps.model.admin_region import AdminRegion
from stadiamaps.model.matched_point import MatchedPoint
from stadiamaps.model.trace_edge import TraceEdge
