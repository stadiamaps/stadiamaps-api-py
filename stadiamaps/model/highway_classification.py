# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).  # noqa: E501

    The version of the OpenAPI document: 5.0.0
    Contact: support@stadiamaps.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stadiamaps import schemas  # noqa: F401


class HighwayClassification(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            internal = schemas.BoolSchema
            link = schemas.BoolSchema
            
            
            class surface(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "paved_smooth": "PAVED_SMOOTH",
                        "paved": "PAVED",
                        "paved_rough": "PAVED_ROUGH",
                        "compacted": "COMPACTED",
                        "dirt": "DIRT",
                        "gravel": "GRAVEL",
                        "path": "PATH",
                        "impassable": "IMPASSABLE",
                    }
                
                @schemas.classproperty
                def PAVED_SMOOTH(cls):
                    return cls("paved_smooth")
                
                @schemas.classproperty
                def PAVED(cls):
                    return cls("paved")
                
                @schemas.classproperty
                def PAVED_ROUGH(cls):
                    return cls("paved_rough")
                
                @schemas.classproperty
                def COMPACTED(cls):
                    return cls("compacted")
                
                @schemas.classproperty
                def DIRT(cls):
                    return cls("dirt")
                
                @schemas.classproperty
                def GRAVEL(cls):
                    return cls("gravel")
                
                @schemas.classproperty
                def PATH(cls):
                    return cls("path")
                
                @schemas.classproperty
                def IMPASSABLE(cls):
                    return cls("impassable")
            
            
            class use(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "road": "ROAD",
                        "ramp": "RAMP",
                        "turn_channel": "TURN_CHANNEL",
                        "track": "TRACK",
                        "driveway": "DRIVEWAY",
                        "alley": "ALLEY",
                        "parking_aisle": "PARKING_AISLE",
                        "emergency_access": "EMERGENCY_ACCESS",
                        "drive_through": "DRIVE_THROUGH",
                        "culdesac": "CULDESAC",
                        "living_street": "LIVING_STREET",
                        "service_road": "SERVICE_ROAD",
                        "cycleway": "CYCLEWAY",
                        "mountain_bike": "MOUNTAIN_BIKE",
                        "sidewalk": "SIDEWALK",
                        "footway": "FOOTWAY",
                        "elevator": "ELEVATOR",
                        "steps": "STEPS",
                        "escalator": "ESCALATOR",
                        "path": "PATH",
                        "pedestrian": "PEDESTRIAN",
                        "bridleway": "BRIDLEWAY",
                        "pedestrian_crossing": "PEDESTRIAN_CROSSING",
                        "rest_area": "REST_AREA",
                        "service_area": "SERVICE_AREA",
                        "other": "OTHER",
                        "rail": "RAIL",
                        "ferry": "FERRY",
                        "rail-ferry": "RAILFERRY",
                        "bus": "BUS",
                        "egress_connection": "EGRESS_CONNECTION",
                        "platform_connnection": "PLATFORM_CONNNECTION",
                        "transit_connection": "TRANSIT_CONNECTION",
                        "construction": "CONSTRUCTION",
                    }
                
                @schemas.classproperty
                def ROAD(cls):
                    return cls("road")
                
                @schemas.classproperty
                def RAMP(cls):
                    return cls("ramp")
                
                @schemas.classproperty
                def TURN_CHANNEL(cls):
                    return cls("turn_channel")
                
                @schemas.classproperty
                def TRACK(cls):
                    return cls("track")
                
                @schemas.classproperty
                def DRIVEWAY(cls):
                    return cls("driveway")
                
                @schemas.classproperty
                def ALLEY(cls):
                    return cls("alley")
                
                @schemas.classproperty
                def PARKING_AISLE(cls):
                    return cls("parking_aisle")
                
                @schemas.classproperty
                def EMERGENCY_ACCESS(cls):
                    return cls("emergency_access")
                
                @schemas.classproperty
                def DRIVE_THROUGH(cls):
                    return cls("drive_through")
                
                @schemas.classproperty
                def CULDESAC(cls):
                    return cls("culdesac")
                
                @schemas.classproperty
                def LIVING_STREET(cls):
                    return cls("living_street")
                
                @schemas.classproperty
                def SERVICE_ROAD(cls):
                    return cls("service_road")
                
                @schemas.classproperty
                def CYCLEWAY(cls):
                    return cls("cycleway")
                
                @schemas.classproperty
                def MOUNTAIN_BIKE(cls):
                    return cls("mountain_bike")
                
                @schemas.classproperty
                def SIDEWALK(cls):
                    return cls("sidewalk")
                
                @schemas.classproperty
                def FOOTWAY(cls):
                    return cls("footway")
                
                @schemas.classproperty
                def ELEVATOR(cls):
                    return cls("elevator")
                
                @schemas.classproperty
                def STEPS(cls):
                    return cls("steps")
                
                @schemas.classproperty
                def ESCALATOR(cls):
                    return cls("escalator")
                
                @schemas.classproperty
                def PATH(cls):
                    return cls("path")
                
                @schemas.classproperty
                def PEDESTRIAN(cls):
                    return cls("pedestrian")
                
                @schemas.classproperty
                def BRIDLEWAY(cls):
                    return cls("bridleway")
                
                @schemas.classproperty
                def PEDESTRIAN_CROSSING(cls):
                    return cls("pedestrian_crossing")
                
                @schemas.classproperty
                def REST_AREA(cls):
                    return cls("rest_area")
                
                @schemas.classproperty
                def SERVICE_AREA(cls):
                    return cls("service_area")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
                
                @schemas.classproperty
                def RAIL(cls):
                    return cls("rail")
                
                @schemas.classproperty
                def FERRY(cls):
                    return cls("ferry")
                
                @schemas.classproperty
                def RAILFERRY(cls):
                    return cls("rail-ferry")
                
                @schemas.classproperty
                def BUS(cls):
                    return cls("bus")
                
                @schemas.classproperty
                def EGRESS_CONNECTION(cls):
                    return cls("egress_connection")
                
                @schemas.classproperty
                def PLATFORM_CONNNECTION(cls):
                    return cls("platform_connnection")
                
                @schemas.classproperty
                def TRANSIT_CONNECTION(cls):
                    return cls("transit_connection")
                
                @schemas.classproperty
                def CONSTRUCTION(cls):
                    return cls("construction")
            
            
            class classification(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "motorway": "MOTORWAY",
                        "trunk": "TRUNK",
                        "primary": "PRIMARY",
                        "secondary": "SECONDARY",
                        "tertiary": "TERTIARY",
                        "unclassified": "UNCLASSIFIED",
                        "residential": "RESIDENTIAL",
                        "service_other": "SERVICE_OTHER",
                    }
                
                @schemas.classproperty
                def MOTORWAY(cls):
                    return cls("motorway")
                
                @schemas.classproperty
                def TRUNK(cls):
                    return cls("trunk")
                
                @schemas.classproperty
                def PRIMARY(cls):
                    return cls("primary")
                
                @schemas.classproperty
                def SECONDARY(cls):
                    return cls("secondary")
                
                @schemas.classproperty
                def TERTIARY(cls):
                    return cls("tertiary")
                
                @schemas.classproperty
                def UNCLASSIFIED(cls):
                    return cls("unclassified")
                
                @schemas.classproperty
                def RESIDENTIAL(cls):
                    return cls("residential")
                
                @schemas.classproperty
                def SERVICE_OTHER(cls):
                    return cls("service_other")
            __annotations__ = {
                "internal": internal,
                "link": link,
                "surface": surface,
                "use": use,
                "classification": classification,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internal"]) -> MetaOapg.properties.internal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surface"]) -> MetaOapg.properties.surface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use"]) -> MetaOapg.properties.use: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classification"]) -> MetaOapg.properties.classification: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["internal", "link", "surface", "use", "classification", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internal"]) -> typing.Union[MetaOapg.properties.internal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surface"]) -> typing.Union[MetaOapg.properties.surface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use"]) -> typing.Union[MetaOapg.properties.use, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classification"]) -> typing.Union[MetaOapg.properties.classification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["internal", "link", "surface", "use", "classification", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        internal: typing.Union[MetaOapg.properties.internal, bool, schemas.Unset] = schemas.unset,
        link: typing.Union[MetaOapg.properties.link, bool, schemas.Unset] = schemas.unset,
        surface: typing.Union[MetaOapg.properties.surface, str, schemas.Unset] = schemas.unset,
        use: typing.Union[MetaOapg.properties.use, str, schemas.Unset] = schemas.unset,
        classification: typing.Union[MetaOapg.properties.classification, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HighwayClassification':
        return super().__new__(
            cls,
            *_args,
            internal=internal,
            link=link,
            surface=surface,
            use=use,
            classification=classification,
            _configuration=_configuration,
            **kwargs,
        )
