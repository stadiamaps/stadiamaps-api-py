# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.1
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from stadiamaps.models.maneuver_sign_element import ManeuverSignElement

class ManeuverSign(BaseModel):
    """
    ManeuverSign
    """
    exit_number_elements: Optional[conlist(ManeuverSignElement)] = Field(None, description="A list of exit number elements. This is typically just a single value.")
    exit_branch_elements: Optional[conlist(ManeuverSignElement)] = Field(None, description="A list of exit branch elements. The text is a subsequent road name or route number after the sign.")
    exit_toward_elements: Optional[conlist(ManeuverSignElement)] = Field(None, description="A list of exit name elements. The text is the interchange identifier (used more frequently outside the US).")
    exit_name_elements: Optional[conlist(ManeuverSignElement)] = Field(None, description="A list of exit name elements. The text is the location where the road ahead goes (typically a city, but occasionally a road name or route number).")
    additional_properties: Dict[str, Any] = {}
    __properties = ["exit_number_elements", "exit_branch_elements", "exit_toward_elements", "exit_name_elements"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ManeuverSign:
        """Create an instance of ManeuverSign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in exit_number_elements (list)
        _items = []
        if self.exit_number_elements:
            for _item in self.exit_number_elements:
                if _item:
                    _items.append(_item.to_dict())
            _dict['exit_number_elements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exit_branch_elements (list)
        _items = []
        if self.exit_branch_elements:
            for _item in self.exit_branch_elements:
                if _item:
                    _items.append(_item.to_dict())
            _dict['exit_branch_elements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exit_toward_elements (list)
        _items = []
        if self.exit_toward_elements:
            for _item in self.exit_toward_elements:
                if _item:
                    _items.append(_item.to_dict())
            _dict['exit_toward_elements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exit_name_elements (list)
        _items = []
        if self.exit_name_elements:
            for _item in self.exit_name_elements:
                if _item:
                    _items.append(_item.to_dict())
            _dict['exit_name_elements'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ManeuverSign:
        """Create an instance of ManeuverSign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ManeuverSign.parse_obj(obj)

        _obj = ManeuverSign.parse_obj({
            "exit_number_elements": [ManeuverSignElement.from_dict(_item) for _item in obj.get("exit_number_elements")] if obj.get("exit_number_elements") is not None else None,
            "exit_branch_elements": [ManeuverSignElement.from_dict(_item) for _item in obj.get("exit_branch_elements")] if obj.get("exit_branch_elements") is not None else None,
            "exit_toward_elements": [ManeuverSignElement.from_dict(_item) for _item in obj.get("exit_toward_elements")] if obj.get("exit_toward_elements") is not None else None,
            "exit_name_elements": [ManeuverSignElement.from_dict(_item) for _item in obj.get("exit_name_elements")] if obj.get("exit_name_elements") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

