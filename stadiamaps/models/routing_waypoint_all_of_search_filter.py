# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.5
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool
from stadiamaps.models.road_class import RoadClass

class RoutingWaypointAllOfSearchFilter(BaseModel):
    """
    RoutingWaypointAllOfSearchFilter
    """
    exclude_tunnel: Optional[StrictBool] = Field(False, description="Excludes roads marked as tunnels")
    exclude_bridge: Optional[StrictBool] = Field(False, description="Excludes roads marked as bridges")
    exclude_ramp: Optional[StrictBool] = Field(False, description="Excludes roads marked as ramps")
    exclude_closures: Optional[StrictBool] = Field(True, description="Excludes roads marked as closed")
    min_road_class: Optional[RoadClass] = None
    max_road_class: Optional[RoadClass] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["exclude_tunnel", "exclude_bridge", "exclude_ramp", "exclude_closures", "min_road_class", "max_road_class"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RoutingWaypointAllOfSearchFilter:
        """Create an instance of RoutingWaypointAllOfSearchFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RoutingWaypointAllOfSearchFilter:
        """Create an instance of RoutingWaypointAllOfSearchFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RoutingWaypointAllOfSearchFilter.parse_obj(obj)

        _obj = RoutingWaypointAllOfSearchFilter.parse_obj({
            "exclude_tunnel": obj.get("exclude_tunnel") if obj.get("exclude_tunnel") is not None else False,
            "exclude_bridge": obj.get("exclude_bridge") if obj.get("exclude_bridge") is not None else False,
            "exclude_ramp": obj.get("exclude_ramp") if obj.get("exclude_ramp") is not None else False,
            "exclude_closures": obj.get("exclude_closures") if obj.get("exclude_closures") is not None else True,
            "min_road_class": obj.get("min_road_class"),
            "max_road_class": obj.get("max_road_class")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

