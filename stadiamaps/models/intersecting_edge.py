# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.1
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt
from stadiamaps.models.edge_use import EdgeUse
from stadiamaps.models.road_class import RoadClass
from stadiamaps.models.traversability import Traversability

class IntersectingEdge(BaseModel):
    """
    IntersectingEdge
    """
    begin_heading: Optional[StrictInt] = Field(None, description="The direction at the beginning of an edge. The units are degrees clockwise from north.")
    from_edge_name_consistency: Optional[StrictBool] = Field(None, description="True if this intersecting edge at the end node has consistent names with the path from the other edge.")
    to_edge_name_consistency: Optional[StrictBool] = Field(None, description="True if this intersecting edge at the end node has consistent names with the path to the other edge.")
    driveability: Optional[Traversability] = None
    cyclability: Optional[Traversability] = None
    walkability: Optional[Traversability] = None
    use: Optional[EdgeUse] = None
    road_class: Optional[RoadClass] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["begin_heading", "from_edge_name_consistency", "to_edge_name_consistency", "driveability", "cyclability", "walkability", "use", "road_class"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IntersectingEdge:
        """Create an instance of IntersectingEdge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IntersectingEdge:
        """Create an instance of IntersectingEdge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IntersectingEdge.parse_obj(obj)

        _obj = IntersectingEdge.parse_obj({
            "begin_heading": obj.get("begin_heading"),
            "from_edge_name_consistency": obj.get("from_edge_name_consistency"),
            "to_edge_name_consistency": obj.get("to_edge_name_consistency"),
            "driveability": obj.get("driveability"),
            "cyclability": obj.get("cyclability"),
            "walkability": obj.get("walkability"),
            "use": obj.get("use"),
            "road_class": obj.get("road_class")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

