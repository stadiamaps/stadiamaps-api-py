# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.

    The version of the OpenAPI document: 9.0.0
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WhosOnFirstConcordances(BaseModel):
    """
    WhosOnFirstConcordances
    """ # noqa: E501
    eurographics_gisco_id: Optional[StrictStr] = None
    faa_code: Optional[StrictStr] = None
    factual_id: Optional[StrictStr] = None
    fifa_id: Optional[StrictStr] = None
    fips_code: Optional[StrictStr] = None
    fr_gov_epci_code: Optional[StrictInt] = Field(default=None, description="An Open Data France EPCI code.")
    fra_insee_code: Optional[StrictInt] = Field(default=None, description="Institut national de la statistique et des études économiques (Insee) code")
    geonames_id: Optional[StrictInt] = None
    geoplanet_id: Optional[StrictInt] = None
    hasc_id: Optional[StrictStr] = Field(default=None, description="A Statoids HASC ID.")
    iata_code: Optional[StrictStr] = None
    icao_code: Optional[StrictStr] = None
    itu_id: Optional[StrictStr] = None
    karmashapes_id: Optional[StrictInt] = None
    natural_earth_id: Optional[StrictStr] = None
    nuts_2021_id: Optional[StrictStr] = Field(default=None, description="A Eurostat NUTS 2021 ID")
    quattroshapes_id: Optional[StrictInt] = None
    quattroshapes_pg_id: Optional[StrictInt] = Field(default=None, description="A Quattroshapes Point Gazetteer ID.")
    us_census_geo_id: Optional[StrictInt] = None
    wikidata_id: Optional[StrictStr] = None
    wikipedia_page: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["eurographics_gisco_id", "faa_code", "factual_id", "fifa_id", "fips_code", "fr_gov_epci_code", "fra_insee_code", "geonames_id", "geoplanet_id", "hasc_id", "iata_code", "icao_code", "itu_id", "karmashapes_id", "natural_earth_id", "nuts_2021_id", "quattroshapes_id", "quattroshapes_pg_id", "us_census_geo_id", "wikidata_id", "wikipedia_page"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WhosOnFirstConcordances from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if eurographics_gisco_id (nullable) is None
        # and model_fields_set contains the field
        if self.eurographics_gisco_id is None and "eurographics_gisco_id" in self.model_fields_set:
            _dict['eurographics_gisco_id'] = None

        # set to None if faa_code (nullable) is None
        # and model_fields_set contains the field
        if self.faa_code is None and "faa_code" in self.model_fields_set:
            _dict['faa_code'] = None

        # set to None if factual_id (nullable) is None
        # and model_fields_set contains the field
        if self.factual_id is None and "factual_id" in self.model_fields_set:
            _dict['factual_id'] = None

        # set to None if fifa_id (nullable) is None
        # and model_fields_set contains the field
        if self.fifa_id is None and "fifa_id" in self.model_fields_set:
            _dict['fifa_id'] = None

        # set to None if fips_code (nullable) is None
        # and model_fields_set contains the field
        if self.fips_code is None and "fips_code" in self.model_fields_set:
            _dict['fips_code'] = None

        # set to None if fr_gov_epci_code (nullable) is None
        # and model_fields_set contains the field
        if self.fr_gov_epci_code is None and "fr_gov_epci_code" in self.model_fields_set:
            _dict['fr_gov_epci_code'] = None

        # set to None if fra_insee_code (nullable) is None
        # and model_fields_set contains the field
        if self.fra_insee_code is None and "fra_insee_code" in self.model_fields_set:
            _dict['fra_insee_code'] = None

        # set to None if geonames_id (nullable) is None
        # and model_fields_set contains the field
        if self.geonames_id is None and "geonames_id" in self.model_fields_set:
            _dict['geonames_id'] = None

        # set to None if geoplanet_id (nullable) is None
        # and model_fields_set contains the field
        if self.geoplanet_id is None and "geoplanet_id" in self.model_fields_set:
            _dict['geoplanet_id'] = None

        # set to None if hasc_id (nullable) is None
        # and model_fields_set contains the field
        if self.hasc_id is None and "hasc_id" in self.model_fields_set:
            _dict['hasc_id'] = None

        # set to None if iata_code (nullable) is None
        # and model_fields_set contains the field
        if self.iata_code is None and "iata_code" in self.model_fields_set:
            _dict['iata_code'] = None

        # set to None if icao_code (nullable) is None
        # and model_fields_set contains the field
        if self.icao_code is None and "icao_code" in self.model_fields_set:
            _dict['icao_code'] = None

        # set to None if itu_id (nullable) is None
        # and model_fields_set contains the field
        if self.itu_id is None and "itu_id" in self.model_fields_set:
            _dict['itu_id'] = None

        # set to None if karmashapes_id (nullable) is None
        # and model_fields_set contains the field
        if self.karmashapes_id is None and "karmashapes_id" in self.model_fields_set:
            _dict['karmashapes_id'] = None

        # set to None if natural_earth_id (nullable) is None
        # and model_fields_set contains the field
        if self.natural_earth_id is None and "natural_earth_id" in self.model_fields_set:
            _dict['natural_earth_id'] = None

        # set to None if nuts_2021_id (nullable) is None
        # and model_fields_set contains the field
        if self.nuts_2021_id is None and "nuts_2021_id" in self.model_fields_set:
            _dict['nuts_2021_id'] = None

        # set to None if quattroshapes_id (nullable) is None
        # and model_fields_set contains the field
        if self.quattroshapes_id is None and "quattroshapes_id" in self.model_fields_set:
            _dict['quattroshapes_id'] = None

        # set to None if quattroshapes_pg_id (nullable) is None
        # and model_fields_set contains the field
        if self.quattroshapes_pg_id is None and "quattroshapes_pg_id" in self.model_fields_set:
            _dict['quattroshapes_pg_id'] = None

        # set to None if us_census_geo_id (nullable) is None
        # and model_fields_set contains the field
        if self.us_census_geo_id is None and "us_census_geo_id" in self.model_fields_set:
            _dict['us_census_geo_id'] = None

        # set to None if wikidata_id (nullable) is None
        # and model_fields_set contains the field
        if self.wikidata_id is None and "wikidata_id" in self.model_fields_set:
            _dict['wikidata_id'] = None

        # set to None if wikipedia_page (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia_page is None and "wikipedia_page" in self.model_fields_set:
            _dict['wikipedia_page'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WhosOnFirstConcordances from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eurographics_gisco_id": obj.get("eurographics_gisco_id"),
            "faa_code": obj.get("faa_code"),
            "factual_id": obj.get("factual_id"),
            "fifa_id": obj.get("fifa_id"),
            "fips_code": obj.get("fips_code"),
            "fr_gov_epci_code": obj.get("fr_gov_epci_code"),
            "fra_insee_code": obj.get("fra_insee_code"),
            "geonames_id": obj.get("geonames_id"),
            "geoplanet_id": obj.get("geoplanet_id"),
            "hasc_id": obj.get("hasc_id"),
            "iata_code": obj.get("iata_code"),
            "icao_code": obj.get("icao_code"),
            "itu_id": obj.get("itu_id"),
            "karmashapes_id": obj.get("karmashapes_id"),
            "natural_earth_id": obj.get("natural_earth_id"),
            "nuts_2021_id": obj.get("nuts_2021_id"),
            "quattroshapes_id": obj.get("quattroshapes_id"),
            "quattroshapes_pg_id": obj.get("quattroshapes_pg_id"),
            "us_census_geo_id": obj.get("us_census_geo_id"),
            "wikidata_id": obj.get("wikidata_id"),
            "wikipedia_page": obj.get("wikipedia_page")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


