# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.

    The version of the OpenAPI document: 9.0.0
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from stadiamaps.models.wof_context_component import WofContextComponent
from typing import Optional, Set
from typing_extensions import Self

class WofContext(BaseModel):
    """
    WofContext
    """ # noqa: E501
    borough: Optional[WofContextComponent] = None
    continent: Optional[WofContextComponent] = None
    country: Optional[WofContextComponent] = None
    county: Optional[WofContextComponent] = None
    dependency: Optional[WofContextComponent] = None
    localadmin: Optional[WofContextComponent] = None
    locality: Optional[WofContextComponent] = None
    macrocounty: Optional[WofContextComponent] = None
    macroregion: Optional[WofContextComponent] = None
    neighbourhood: Optional[WofContextComponent] = None
    region: Optional[WofContextComponent] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["borough", "continent", "country", "county", "dependency", "localadmin", "locality", "macrocounty", "macroregion", "neighbourhood", "region"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WofContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of borough
        if self.borough:
            _dict['borough'] = self.borough.to_dict()
        # override the default output from pydantic by calling `to_dict()` of continent
        if self.continent:
            _dict['continent'] = self.continent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of county
        if self.county:
            _dict['county'] = self.county.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dependency
        if self.dependency:
            _dict['dependency'] = self.dependency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localadmin
        if self.localadmin:
            _dict['localadmin'] = self.localadmin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of locality
        if self.locality:
            _dict['locality'] = self.locality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of macrocounty
        if self.macrocounty:
            _dict['macrocounty'] = self.macrocounty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of macroregion
        if self.macroregion:
            _dict['macroregion'] = self.macroregion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of neighbourhood
        if self.neighbourhood:
            _dict['neighbourhood'] = self.neighbourhood.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if borough (nullable) is None
        # and model_fields_set contains the field
        if self.borough is None and "borough" in self.model_fields_set:
            _dict['borough'] = None

        # set to None if continent (nullable) is None
        # and model_fields_set contains the field
        if self.continent is None and "continent" in self.model_fields_set:
            _dict['continent'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if county (nullable) is None
        # and model_fields_set contains the field
        if self.county is None and "county" in self.model_fields_set:
            _dict['county'] = None

        # set to None if dependency (nullable) is None
        # and model_fields_set contains the field
        if self.dependency is None and "dependency" in self.model_fields_set:
            _dict['dependency'] = None

        # set to None if localadmin (nullable) is None
        # and model_fields_set contains the field
        if self.localadmin is None and "localadmin" in self.model_fields_set:
            _dict['localadmin'] = None

        # set to None if locality (nullable) is None
        # and model_fields_set contains the field
        if self.locality is None and "locality" in self.model_fields_set:
            _dict['locality'] = None

        # set to None if macrocounty (nullable) is None
        # and model_fields_set contains the field
        if self.macrocounty is None and "macrocounty" in self.model_fields_set:
            _dict['macrocounty'] = None

        # set to None if macroregion (nullable) is None
        # and model_fields_set contains the field
        if self.macroregion is None and "macroregion" in self.model_fields_set:
            _dict['macroregion'] = None

        # set to None if neighbourhood (nullable) is None
        # and model_fields_set contains the field
        if self.neighbourhood is None and "neighbourhood" in self.model_fields_set:
            _dict['neighbourhood'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WofContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "borough": WofContextComponent.from_dict(obj["borough"]) if obj.get("borough") is not None else None,
            "continent": WofContextComponent.from_dict(obj["continent"]) if obj.get("continent") is not None else None,
            "country": WofContextComponent.from_dict(obj["country"]) if obj.get("country") is not None else None,
            "county": WofContextComponent.from_dict(obj["county"]) if obj.get("county") is not None else None,
            "dependency": WofContextComponent.from_dict(obj["dependency"]) if obj.get("dependency") is not None else None,
            "localadmin": WofContextComponent.from_dict(obj["localadmin"]) if obj.get("localadmin") is not None else None,
            "locality": WofContextComponent.from_dict(obj["locality"]) if obj.get("locality") is not None else None,
            "macrocounty": WofContextComponent.from_dict(obj["macrocounty"]) if obj.get("macrocounty") is not None else None,
            "macroregion": WofContextComponent.from_dict(obj["macroregion"]) if obj.get("macroregion") is not None else None,
            "neighbourhood": WofContextComponent.from_dict(obj["neighbourhood"]) if obj.get("neighbourhood") is not None else None,
            "region": WofContextComponent.from_dict(obj["region"]) if obj.get("region") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


