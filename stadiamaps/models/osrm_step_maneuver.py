# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.

    The version of the OpenAPI document: 8.0.0
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from stadiamaps.models.osrm_guidance_modifier import OsrmGuidanceModifier
from typing import Optional, Set
from typing_extensions import Self

class OsrmStepManeuver(BaseModel):
    """
    OsrmStepManeuver
    """ # noqa: E501
    location: Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=2, max_length=2)] = Field(description="A (longitude, latitude) coordinate pair.")
    instruction: Optional[StrictStr] = Field(default=None, description="A human-readable instruction for the maneuver.")
    bearing_before: StrictInt = Field(description="The clockwise angle from true north to the direction of travel immediately before the maneuver.")
    bearing_after: StrictInt = Field(description="The clockwise angle from true north to the direction of travel immediately after the maneuver.")
    type: StrictStr
    modifier: Optional[OsrmGuidanceModifier] = None
    exit: Optional[StrictInt] = Field(default=None, description="The exit number to take (for roundabouts, rotaries, and number of intersections).")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["location", "instruction", "bearing_before", "bearing_after", "type", "modifier", "exit"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['turn', 'new name', 'depart', 'arrive', 'merge', 'ramp', 'on ramp', 'off ramp', 'fork', 'end of road', 'use lane', 'continue', 'roundabout', 'rotary', 'roundabout turn', 'notification']):
            raise ValueError("must be one of enum values ('turn', 'new name', 'depart', 'arrive', 'merge', 'ramp', 'on ramp', 'off ramp', 'fork', 'end of road', 'use lane', 'continue', 'roundabout', 'rotary', 'roundabout turn', 'notification')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OsrmStepManeuver from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if modifier (nullable) is None
        # and model_fields_set contains the field
        if self.modifier is None and "modifier" in self.model_fields_set:
            _dict['modifier'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OsrmStepManeuver from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "location": obj.get("location"),
            "instruction": obj.get("instruction"),
            "bearing_before": obj.get("bearing_before"),
            "bearing_after": obj.get("bearing_after"),
            "type": obj.get("type"),
            "modifier": obj.get("modifier"),
            "exit": obj.get("exit")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


