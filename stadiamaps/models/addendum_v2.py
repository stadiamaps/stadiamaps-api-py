# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.

    The version of the OpenAPI document: 9.0.0
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from stadiamaps.models.foursquare_addendum import FoursquareAddendum
from stadiamaps.models.geonames_addendum import GeonamesAddendum
from stadiamaps.models.open_street_map_addendum import OpenStreetMapAddendum
from stadiamaps.models.whos_on_first_concordances import WhosOnFirstConcordances
from typing import Optional, Set
from typing_extensions import Self

class AddendumV2(BaseModel):
    """
    Miscellaneous data that doesn't quite fit anywhere else in the record.
    """ # noqa: E501
    foursquare: Optional[FoursquareAddendum] = None
    geonames: Optional[GeonamesAddendum] = None
    osm: Optional[OpenStreetMapAddendum] = None
    whosonfirst_concordances: Optional[WhosOnFirstConcordances] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["foursquare", "geonames", "osm", "whosonfirst_concordances"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddendumV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of foursquare
        if self.foursquare:
            _dict['foursquare'] = self.foursquare.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geonames
        if self.geonames:
            _dict['geonames'] = self.geonames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of osm
        if self.osm:
            _dict['osm'] = self.osm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of whosonfirst_concordances
        if self.whosonfirst_concordances:
            _dict['whosonfirst_concordances'] = self.whosonfirst_concordances.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if foursquare (nullable) is None
        # and model_fields_set contains the field
        if self.foursquare is None and "foursquare" in self.model_fields_set:
            _dict['foursquare'] = None

        # set to None if geonames (nullable) is None
        # and model_fields_set contains the field
        if self.geonames is None and "geonames" in self.model_fields_set:
            _dict['geonames'] = None

        # set to None if osm (nullable) is None
        # and model_fields_set contains the field
        if self.osm is None and "osm" in self.model_fields_set:
            _dict['osm'] = None

        # set to None if whosonfirst_concordances (nullable) is None
        # and model_fields_set contains the field
        if self.whosonfirst_concordances is None and "whosonfirst_concordances" in self.model_fields_set:
            _dict['whosonfirst_concordances'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddendumV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "foursquare": FoursquareAddendum.from_dict(obj["foursquare"]) if obj.get("foursquare") is not None else None,
            "geonames": GeonamesAddendum.from_dict(obj["geonames"]) if obj.get("geonames") is not None else None,
            "osm": OpenStreetMapAddendum.from_dict(obj["osm"]) if obj.get("osm") is not None else None,
            "whosonfirst_concordances": WhosOnFirstConcordances.from_dict(obj["whosonfirst_concordances"]) if obj.get("whosonfirst_concordances") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


