# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.4
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from stadiamaps.models.coordinate import Coordinate
from stadiamaps.models.matrix_distance import MatrixDistance
from stadiamaps.models.valhalla_long_units import ValhallaLongUnits
from stadiamaps.models.warning import Warning

class MatrixResponse(BaseModel):
    """
    MatrixResponse
    """
    id: Optional[StrictStr] = Field(None, description="An identifier to disambiguate requests (echoed by the server).")
    sources: conlist(conlist(Coordinate), min_items=1) = Field(..., description="The list of starting locations")
    targets: conlist(conlist(Coordinate), min_items=1) = Field(..., description="The list of ending locations")
    sources_to_targets: conlist(conlist(MatrixDistance), min_items=1) = Field(..., description="The matrix of starting and ending locations, along with the computed distance and travel time. The array is row-ordered. This means that the time and distance from the first location to all others forms the first row of the array, followed by the time and distance from the second source location to all target locations, etc.")
    warnings: Optional[conlist(Warning)] = None
    units: ValhallaLongUnits = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "sources", "targets", "sources_to_targets", "warnings", "units"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MatrixResponse:
        """Create an instance of MatrixResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item in self.sources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item in self.targets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['targets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sources_to_targets (list)
        _items = []
        if self.sources_to_targets:
            for _item in self.sources_to_targets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sources_to_targets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item in self.warnings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['warnings'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MatrixResponse:
        """Create an instance of MatrixResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MatrixResponse.parse_obj(obj)

        _obj = MatrixResponse.parse_obj({
            "id": obj.get("id"),
            "sources": [[Coordinate.from_dict(_item) for _item in _items] for _items in obj.get("sources")] if obj.get("sources") is not None else None,
            "targets": [[Coordinate.from_dict(_item) for _item in _items] for _items in obj.get("targets")] if obj.get("targets") is not None else None,
            "sources_to_targets": [[MatrixDistance.from_dict(_item) for _item in _items] for _items in obj.get("sources_to_targets")] if obj.get("sources_to_targets") is not None else None,
            "warnings": [Warning.from_dict(_item) for _item in obj.get("warnings")] if obj.get("warnings") is not None else None,
            "units": obj.get("units")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

