# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.1
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, validator

class MatchedPoint(BaseModel):
    """
    MatchedPoint
    """
    lat: Union[StrictFloat, StrictInt] = Field(..., description="The latitude of the matched point.")
    lon: Union[StrictFloat, StrictInt] = Field(..., description="The longitude of the matched point.")
    type: StrictStr = Field(...)
    edge_index: Optional[StrictInt] = Field(None, description="The index of the edge in the list of `edges`. This key will be missing if the point is unmatched.")
    begin_route_discontinuity: Optional[StrictBool] = Field(False, description="If true, this match result is the begin location of a route discontinuity.")
    end_route_discontinuity: Optional[StrictBool] = Field(False, description="If true, this match result is the end location of a route discontinuity.")
    distance_along_edge: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The distance along the associated edge for this matched point, expressed as a value between 0 and 1. For example, if the matched point is halfway along the edge, then the value will be 0.5. This key will be absent if the point is unmatched.")
    distance_from_trace_point: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The distance in meters from the trace point to the matched point. This key will be absent if the point is unmatched.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["lat", "lon", "type", "edge_index", "begin_route_discontinuity", "end_route_discontinuity", "distance_along_edge", "distance_from_trace_point"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('unmatched', 'interpolated', 'matched'):
            raise ValueError("must be one of enum values ('unmatched', 'interpolated', 'matched')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MatchedPoint:
        """Create an instance of MatchedPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MatchedPoint:
        """Create an instance of MatchedPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MatchedPoint.parse_obj(obj)

        _obj = MatchedPoint.parse_obj({
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "type": obj.get("type"),
            "edge_index": obj.get("edge_index"),
            "begin_route_discontinuity": obj.get("begin_route_discontinuity") if obj.get("begin_route_discontinuity") is not None else False,
            "end_route_discontinuity": obj.get("end_route_discontinuity") if obj.get("end_route_discontinuity") is not None else False,
            "distance_along_edge": obj.get("distance_along_edge"),
            "distance_from_trace_point": obj.get("distance_from_trace_point")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

