# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.1
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class GeoAttributes(BaseModel):
    """
    GeoAttributes
    """
    curvature: Optional[StrictInt] = Field(None, description="Curvature factor.")
    max_down_slope: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The maximum downward slope. Uses 1 degree precision for slopes to -16 degrees, and 4 degree precision afterwards (up to a max of -76 degrees).")
    max_up_slope: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The maximum upward slope. Uses 1 degree precision for slopes to 16 degrees, and 4 degree precision afterwards (up to a max of 76 degrees).")
    weighted_grade: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The weighted estimate of the grade.")
    length: Optional[StrictInt] = Field(None, description="The length of the edge, in meters.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["curvature", "max_down_slope", "max_up_slope", "weighted_grade", "length"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GeoAttributes:
        """Create an instance of GeoAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GeoAttributes:
        """Create an instance of GeoAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GeoAttributes.parse_obj(obj)

        _obj = GeoAttributes.parse_obj({
            "curvature": obj.get("curvature"),
            "max_down_slope": obj.get("max_down_slope"),
            "max_up_slope": obj.get("max_up_slope"),
            "weighted_grade": obj.get("weighted_grade"),
            "length": obj.get("length")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

