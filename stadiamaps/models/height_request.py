# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.1
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist, validator
from stadiamaps.models.coordinate import Coordinate

class HeightRequest(BaseModel):
    """
    HeightRequest
    """
    id: Optional[StrictStr] = Field(None, description="An identifier to disambiguate requests (echoed by the server).")
    shape: Optional[conlist(Coordinate)] = Field(None, description="REQUIRED if `encoded_polyline` is not present.")
    encoded_polyline: Optional[StrictStr] = Field(None, description="REQUIRED if `shape` is not present. An encoded polyline (https://developers.google.com/maps/documentation/utilities/polylinealgorithm).")
    shape_format: Optional[StrictStr] = Field('polyline6', description="Specifies whether the polyline is encoded with 6 digit precision (polyline6) or 5 digit precision (polyline5).")
    range: Optional[StrictBool] = Field(False, description="Controls whether or not the returned array is one-dimensional (height only) or two-dimensional (with a range and height). The range dimension can be used to generate a graph or steepness gradient along a route.")
    height_precision: Optional[conint(strict=True, le=2, ge=0)] = Field(0, description="The decimal precision (number of digits after the point) of the output. When 0, integer values are returned. Valid values are 0, 1, and 2.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "shape", "encoded_polyline", "shape_format", "range", "height_precision"]

    @validator('shape_format')
    def shape_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('polyline6', 'polyline5'):
            raise ValueError("must be one of enum values ('polyline6', 'polyline5')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HeightRequest:
        """Create an instance of HeightRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in shape (list)
        _items = []
        if self.shape:
            for _item in self.shape:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shape'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HeightRequest:
        """Create an instance of HeightRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HeightRequest.parse_obj(obj)

        _obj = HeightRequest.parse_obj({
            "id": obj.get("id"),
            "shape": [Coordinate.from_dict(_item) for _item in obj.get("shape")] if obj.get("shape") is not None else None,
            "encoded_polyline": obj.get("encoded_polyline"),
            "shape_format": obj.get("shape_format") if obj.get("shape_format") is not None else 'polyline6',
            "range": obj.get("range") if obj.get("range") is not None else False,
            "height_precision": obj.get("height_precision") if obj.get("height_precision") is not None else 0
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

