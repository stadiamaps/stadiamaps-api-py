# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.

    The version of the OpenAPI document: 6.3.0
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from stadiamaps.models.intersecting_edge import IntersectingEdge
from stadiamaps.models.node_type import NodeType
from typing import Optional, Set
from typing_extensions import Self

class EndNode(BaseModel):
    """
    The node at the end of this edge
    """ # noqa: E501
    intersecting_edges: Optional[List[IntersectingEdge]] = Field(default=None, description="A set of edges intersecting this node.")
    elapsed_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The elapsed time along the path to arrive at this node.")
    admin_index: Optional[StrictInt] = Field(default=None, description="The index into the `admins` list in which this node lies.")
    type: Optional[NodeType] = None
    fork: Optional[StrictBool] = Field(default=None, description="True if this node is a fork.")
    time_zone: Optional[StrictStr] = Field(default=None, description="The canonical TZDB identifier for the node's time zone.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["intersecting_edges", "elapsed_time", "admin_index", "type", "fork", "time_zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in intersecting_edges (list)
        _items = []
        if self.intersecting_edges:
            for _item in self.intersecting_edges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['intersecting_edges'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "intersecting_edges": [IntersectingEdge.from_dict(_item) for _item in obj["intersecting_edges"]] if obj.get("intersecting_edges") is not None else None,
            "elapsed_time": obj.get("elapsed_time"),
            "admin_index": obj.get("admin_index"),
            "type": obj.get("type"),
            "fork": obj.get("fork"),
            "time_zone": obj.get("time_zone")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


