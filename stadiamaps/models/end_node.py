# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.  # noqa: E501

    The version of the OpenAPI document: 5.0.1
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from stadiamaps.models.intersecting_edge import IntersectingEdge
from stadiamaps.models.node_type import NodeType

class EndNode(BaseModel):
    """
    The node at the end of this edge
    """
    intersecting_edges: Optional[conlist(IntersectingEdge)] = Field(None, description="A set of edges intersecting this node.")
    elapsed_time: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The elapsed time along the path to arrive at this node.")
    admin_index: Optional[StrictInt] = Field(None, description="The index into the `admins` list in which this node lies.")
    type: Optional[NodeType] = None
    fork: Optional[StrictBool] = Field(None, description="True if this node is a fork.")
    time_zone: Optional[StrictStr] = Field(None, description="The canonical TZDB identifier for the node's time zone.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["intersecting_edges", "elapsed_time", "admin_index", "type", "fork", "time_zone"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EndNode:
        """Create an instance of EndNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in intersecting_edges (list)
        _items = []
        if self.intersecting_edges:
            for _item in self.intersecting_edges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['intersecting_edges'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EndNode:
        """Create an instance of EndNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EndNode.parse_obj(obj)

        _obj = EndNode.parse_obj({
            "intersecting_edges": [IntersectingEdge.from_dict(_item) for _item in obj.get("intersecting_edges")] if obj.get("intersecting_edges") is not None else None,
            "elapsed_time": obj.get("elapsed_time"),
            "admin_index": obj.get("admin_index"),
            "type": obj.get("type"),
            "fork": obj.get("fork"),
            "time_zone": obj.get("time_zone")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

