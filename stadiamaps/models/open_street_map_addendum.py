# coding: utf-8

"""
    Stadia Maps Geospatial APIs

    The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.

    The version of the OpenAPI document: 9.0.0
    Contact: support@stadiamaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OpenStreetMapAddendum(BaseModel):
    """
    OpenStreetMapAddendum
    """ # noqa: E501
    brand: Optional[StrictStr] = Field(default=None, description="The principal brand of goods/services sold at a place, or the common identity for individually owned and operated stores.")
    iata: Optional[StrictStr] = Field(default=None, description="IATA airport code.")
    icao: Optional[StrictStr] = Field(default=None, description="ICAO airport code.")
    opening_hours: Optional[StrictStr] = Field(default=None, description="The opening hours of the place, in the OSM Opening Hours specification.  See https://wiki.openstreetmap.org/wiki/Key:opening_hours/specification for details.")
    operator: Optional[StrictStr] = Field(default=None, description="THe company, corp, person, or other entity directly in charge of operating something.  This is often used for public transport, hotels, restaurants, and postal services. See https://wiki.openstreetmap.org/wiki/Key:operator for details")
    phone: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    wikidata: Optional[StrictStr] = Field(default=None, description="Wikidata concordance ID.")
    wikipedia: Optional[StrictStr] = Field(default=None, description="Wikipedia concordance ID.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["brand", "iata", "icao", "opening_hours", "operator", "phone", "website", "wikidata", "wikipedia"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenStreetMapAddendum from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if brand (nullable) is None
        # and model_fields_set contains the field
        if self.brand is None and "brand" in self.model_fields_set:
            _dict['brand'] = None

        # set to None if iata (nullable) is None
        # and model_fields_set contains the field
        if self.iata is None and "iata" in self.model_fields_set:
            _dict['iata'] = None

        # set to None if icao (nullable) is None
        # and model_fields_set contains the field
        if self.icao is None and "icao" in self.model_fields_set:
            _dict['icao'] = None

        # set to None if opening_hours (nullable) is None
        # and model_fields_set contains the field
        if self.opening_hours is None and "opening_hours" in self.model_fields_set:
            _dict['opening_hours'] = None

        # set to None if operator (nullable) is None
        # and model_fields_set contains the field
        if self.operator is None and "operator" in self.model_fields_set:
            _dict['operator'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        # set to None if wikidata (nullable) is None
        # and model_fields_set contains the field
        if self.wikidata is None and "wikidata" in self.model_fields_set:
            _dict['wikidata'] = None

        # set to None if wikipedia (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia is None and "wikipedia" in self.model_fields_set:
            _dict['wikipedia'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenStreetMapAddendum from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brand": obj.get("brand"),
            "iata": obj.get("iata"),
            "icao": obj.get("icao"),
            "opening_hours": obj.get("opening_hours"),
            "operator": obj.get("operator"),
            "phone": obj.get("phone"),
            "website": obj.get("website"),
            "wikidata": obj.get("wikidata"),
            "wikipedia": obj.get("wikipedia")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


